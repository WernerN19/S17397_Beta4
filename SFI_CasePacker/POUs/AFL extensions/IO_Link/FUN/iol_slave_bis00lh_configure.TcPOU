<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="iol_slave_bis00lh_configure" Id="{914d5861-21e2-010a-3d8f-0fc57e337cbb}" SpecialFunc="None">
    <Declaration><![CDATA[
(*$
<p>This function configures a generic <a target="_blank" href="#iol_slave">iol_slave</a> as a <strong>Balluff BSP00UE</strong>. It allow to connect the object to the device-specific
parameters structure variable <a target="_blank" href="#iol_slave_bsp00ue_data">iol_slave_bsp00ue_data</a>.</p>
<p>This function should be called at startup only.</p>
$*)

FUNCTION iol_slave_bis00lh_configure : VOID
VAR_IN_OUT
	
	rfid_input_buffer:				iol_slave_bis00lh_pdo_input;
	rfid_input_bitheader_1:			iol_slave_bis00lh_bitheader_input;
	rfid_input_bitheader_2:			iol_slave_bis00lh_bitheader_input;
	
	rfid_output_buffer:				iol_slave_bis00lh_pdo_output;
	rfid_output_bitheader_1:			iol_slave_bis00lh_bitheader_output;
	rfid_output_bitheader_2:			iol_slave_bis00lh_bitheader_output;
	
END_VAR

VAR
	
END_VAR

VAR CONSTANT
	NULL:                                   			XWORD := 0;
	data:						iol_slave_bis00lh_data;			(*$	Parameters struct variable	$*)
	CONVERSION_this:			iol_slave;						(*$ Instance to which the method applies $*)
	
END_VAR
 
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

(*** Start parameter configuration ***)

(* STANDARD PARAMETERS CONFIGURATION *)

(* RMH RFID TEST *)
rfid_input_bitheader_1.CP := rfid_input_buffer.ByteArr[0].0;
rfid_input_bitheader_1.AA := rfid_input_buffer.ByteArr[0].1;
rfid_input_bitheader_1.AE := rfid_input_buffer.ByteArr[0].2;
rfid_input_bitheader_1.AF := rfid_input_buffer.ByteArr[0].3;
rfid_input_bitheader_1.Bit4 := rfid_input_buffer.ByteArr[0].4;
rfid_input_bitheader_1._TO := rfid_input_buffer.ByteArr[0].5;
rfid_input_bitheader_1.HF := rfid_input_buffer.ByteArr[0].6;
rfid_input_bitheader_1.BB := rfid_input_buffer.ByteArr[0].7;

rfid_input_bitheader_2.CP := rfid_input_buffer.ByteArr[0].0;
rfid_input_bitheader_2.AA := rfid_input_buffer.ByteArr[0].1;
rfid_input_bitheader_2.AE := rfid_input_buffer.ByteArr[0].2;
rfid_input_bitheader_2.AF := rfid_input_buffer.ByteArr[0].3;
rfid_input_bitheader_2.Bit4 := rfid_input_buffer.ByteArr[0].4;
rfid_input_bitheader_2._TO := rfid_input_buffer.ByteArr[0].5;
rfid_input_bitheader_2.HF := rfid_input_buffer.ByteArr[0].6;
rfid_input_bitheader_2.BB := rfid_input_buffer.ByteArr[0].7;

rfid_output_bitheader_1.TI := rfid_output_buffer.ByteArr[0].0;
rfid_output_bitheader_1.Bit1 := rfid_output_buffer.ByteArr[0].1;
rfid_output_bitheader_1.GR := rfid_output_buffer.ByteArr[0].2;
rfid_output_bitheader_1.Bit3 := rfid_output_buffer.ByteArr[0].3;
rfid_output_bitheader_1.Bit4 := rfid_output_buffer.ByteArr[0].4;
rfid_output_bitheader_1.KA := rfid_output_buffer.ByteArr[0].5;
rfid_output_bitheader_1.TI := rfid_output_buffer.ByteArr[0].6;
rfid_output_bitheader_1.Bit7 := rfid_output_buffer.ByteArr[0].7;

rfid_output_bitheader_2.TI := rfid_output_buffer.ByteArr[0].0;
rfid_output_bitheader_2.Bit1 := rfid_output_buffer.ByteArr[0].1;
rfid_output_bitheader_2.GR := rfid_output_buffer.ByteArr[0].2;
rfid_output_bitheader_2.Bit3 := rfid_output_buffer.ByteArr[0].3;
rfid_output_bitheader_2.Bit4 := rfid_output_buffer.ByteArr[0].4;
rfid_output_bitheader_2.KA := rfid_output_buffer.ByteArr[0].5;
rfid_output_bitheader_2.TI := rfid_output_buffer.ByteArr[0].6;
rfid_output_bitheader_2.Bit7 := rfid_output_buffer.ByteArr[0].7;


(*IF iol_slave_is_not_initialized(CONVERSION_this := CONVERSION_this)
	OR
	iol_slave_is_configured(CONVERSION_this := CONVERSION_this)
THEN
	RETURN;
END_IF


iol_slave_configure_parameter(
	current_value_address := ADR(CONVERSION_this.vendor_name),
	configured_value_address := NULL,
	length := SIZEOF(CONVERSION_this.vendor_name),
	_type := ADST_STRING,
	coe_index := 16#0010,
	coe_sub_index := 16#00,
	readable := TRUE,
	writeable := FALSE,
	to_check := FALSE,
	CONVERSION_this := CONVERSION_this);


iol_slave_configure_parameter(
	current_value_address := ADR(CONVERSION_this.product_name),
	configured_value_address := NULL,
	length := SIZEOF(CONVERSION_this.product_name),
	_type := ADST_STRING,
	coe_index := 16#0012,
	coe_sub_index := 16#00,
	readable := TRUE,
	writeable := FALSE,
	to_check := FALSE,
	CONVERSION_this := CONVERSION_this);

iol_slave_configure_parameter(
	current_value_address := ADR(CONVERSION_this.product_id),
	configured_value_address := NULL,
	length := SIZEOF(CONVERSION_this.product_id),
	_type := ADST_STRING,
	coe_index := 16#0013,
	coe_sub_index := 16#00,
	readable := TRUE,
	writeable := FALSE,
	to_check := FALSE,
	CONVERSION_this := CONVERSION_this);


iol_slave_configure_parameter(
	current_value_address := ADR(CONVERSION_this.hardware_revision),
	configured_value_address := NULL,
	length := SIZEOF(CONVERSION_this.hardware_revision),
	_type := ADST_STRING,
	coe_index := 16#0016,
	coe_sub_index := 16#00,
	readable := TRUE,
	writeable := FALSE,
	to_check := FALSE,
	CONVERSION_this := CONVERSION_this);

iol_slave_configure_parameter(
	current_value_address := ADR(CONVERSION_this.firmware_revision),
	configured_value_address := NULL,
	length := SIZEOF(CONVERSION_this.firmware_revision),
	_type := ADST_STRING,
	coe_index := 16#0017,
	coe_sub_index := 16#00,
	readable := TRUE,
	writeable := FALSE,
	to_check := FALSE,
	CONVERSION_this := CONVERSION_this);

iol_slave_configure_parameter(
	current_value_address := ADR(CONVERSION_this.current_app_specific_tag),
	configured_value_address := ADR(CONVERSION_this.configured_app_specific_tag),
	length := SIZEOF(CONVERSION_this.current_app_specific_tag),
	_type := ADST_STRING,
	coe_index := 16#0018,
	coe_sub_index := 16#00,
	readable := TRUE,
	writeable := TRUE,
	to_check := TRUE,
	CONVERSION_this := CONVERSION_this);
	
	

(* CUSTOM PARAMETERS CONFIGURATION *)
(*
iol_slave_configure_parameter(
	current_value_address := ADR(data.v_param_1),
	configured_value_address := ADR(data.v_param_1),
	length := SIZEOF(data.v_param_1),
	_type := ADST_UINT8,
	coe_index := 16#0040,
	coe_sub_index := 16#01,
	readable := TRUE,
	writeable := TRUE,
	to_check := FALSE,
	CONVERSION_this := CONVERSION_this);
	
iol_slave_configure_parameter(
	current_value_address := ADR(data.v_param_2),
	configured_value_address := ADR(data.v_param_2),
	length := SIZEOF(data.v_param_2),
	_type := ADST_UINT8,
	coe_index := 16#0040,
	coe_sub_index := 16#02,
	readable := TRUE,
	writeable := TRUE,
	to_check := FALSE,
	CONVERSION_this := CONVERSION_this);
	
iol_slave_configure_parameter(
	current_value_address := ADR(data.v_param_3),
	configured_value_address := ADR(data.v_param_3),
	length := SIZEOF(data.v_param_3),
	_type := ADST_UINT8,
	coe_index := 16#0040,
	coe_sub_index := 16#03,
	readable := TRUE,
	writeable := TRUE,
	to_check := FALSE,
	CONVERSION_this := CONVERSION_this);
	
iol_slave_configure_parameter(
	current_value_address := ADR(data.v_param_4),
	configured_value_address := ADR(data.v_param_4),
	length := SIZEOF(data.v_param_4),
	_type := ADST_UINT8,
	coe_index := 16#0040,
	coe_sub_index := 16#04,
	readable := TRUE,
	writeable := TRUE,
	to_check := FALSE,
	CONVERSION_this := CONVERSION_this);
	
iol_slave_configure_parameter(
	current_value_address := ADR(data.v_param_5),
	configured_value_address := ADR(data.v_param_5),
	length := SIZEOF(data.v_param_5),
	_type := ADST_UINT8,
	coe_index := 16#0040,
	coe_sub_index := 16#05,
	readable := TRUE,
	writeable := TRUE,
	to_check := FALSE,
	CONVERSION_this := CONVERSION_this);
	
iol_slave_configure_parameter(
	current_value_address := ADR(data.v_param_6),
	configured_value_address := ADR(data.v_param_6),
	length := SIZEOF(data.v_param_6),
	_type := ADST_UINT8,
	coe_index := 16#0040,
	coe_sub_index := 16#06,
	readable := TRUE,
	writeable := TRUE,
	to_check := FALSE,
	CONVERSION_this := CONVERSION_this);
	*)
	

	
CONVERSION_this.CONVERSION_private.last_info_data_index := 6;

(*** End parameter configuration ***)
iol_slave_configuration_completed(
	parameters_ptr := ADR(data),
	parameters_struct_size := SIZEOF(data),
	CONVERSION_this := CONVERSION_this);*)]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>