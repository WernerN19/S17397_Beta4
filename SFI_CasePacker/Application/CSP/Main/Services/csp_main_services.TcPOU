<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="csp_main_services" Id="{7fcff8aa-84bb-4f7e-b323-408963810b61}" SpecialFunc="None">
    <Declaration><![CDATA[(********************* G.D S.p.A. - Technical Department *****************************

Date			Version		Author			Description             
----------      -------		-----------		----------------------------------------------
2015/06/30		0000.00		M.Grasso		Initial Release

DESCRIPTION:	

NOTES:        		 

**************************************************************************************)
(*$R process_ref := prc; $*)

PROGRAM csp_main_services
VAR
	prc:								process;
	prc_path:							STRING;
	reset_output_test:					digital_output;
	
	iol_master_el6224_IO6100:			iol_master;
	
	lights_toggle:						BOOL := TRUE; (*$P $*)
	
	pressure_switch_value AT %I*:		INT;
	no_pressure_dchk:					digital_check;
	pressure_level_low_bool:			boolean;
	pressure_value_limit:				INT := 1000; (*$P $*)
	pressure_check_delay:				DINT := 15000; (*$P $*)
	
	air_not_above_limit_motcond:		motorization_conditioner;
	
	pressure_check_delay_running: 		DINT := 100;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[_read_var_input();
_objects_manager();

IF g_application_status <> APPLICATION_STATUS_RUNNING
THEN
	RETURN;
END_IF

_read_process_image();

_mode_manager();

CASE process_get_mode (CONVERSION_this := prc) OF

	MODE_ABSENT,
	MODE_INACTIVE:
		RETURN;

	MODE_TEST:
		_handle_process_test();
END_CASE
_set_runtime_properties();

(*************************************************************************************
**************************************************************************************)
(*BODY*)

IF descriptor_get_reset_edge(prc.descriptor)
THEN
	digital_output_set(reset_output_test);
ELSE
	digital_output_reset(reset_output_test);
END_IF



(* LOGIC TO CHECK FOR PRESSURE AFTER MACHINE IS READY *)
IF machine_is_running(csp.mch)
AND pressure_switch_value < pressure_value_limit
	THEN
		digital_check_set_alarm_delay(
			alarm_delay := pressure_check_delay_running,
			CONVERSION_this := no_pressure_dchk);
		boolean_set(pressure_level_low_bool);
END_IF

IF machine_is_ready(csp.mch)
AND pressure_switch_value < pressure_value_limit
	THEN
digital_check_set_alarm_delay(
	alarm_delay := pressure_check_delay,
	CONVERSION_this := no_pressure_dchk);
		boolean_set(pressure_level_low_bool);
END_IF


IF machine_is_stopped(csp.mch)
	OR 
	pressure_switch_value > pressure_value_limit
	THEN
	boolean_reset(pressure_level_low_bool);
END_IF



IF	motorization_manager_is_starting(csp_main_motorization_manager.motm)
AND pressure_switch_value > pressure_value_limit
	THEN
		motorization_conditioner_start_done(air_not_above_limit_motcond);
END_IF

(*************************************************************************************
**************************************************************************************)

_handle_messages();
_write_output();]]></ST>
    </Implementation>
    <Action Name="_handle_messages" Id="{222f87da-9052-4cb0-8765-a7cf855f9ce9}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_handle_process_test" Id="{baa59556-956f-4f92-9625-2e96ca0b7a48}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_mode_manager" Id="{28febe29-53aa-48aa-aa0f-062d7a48bb80}">
      <Implementation>
        <ST><![CDATA[IF process_mode_req_is_pending(CONVERSION_this := prc)
THEN
    process_apply_mode_req_first_step(CONVERSION_this := prc);
    CASE process_get_mode(CONVERSION_this := prc) OF
        MODE_TO_ABSENT:
            ;
        MODE_TO_INACTIVE:
            ;
        MODE_TO_TEST:
            ;
        MODE_TO_OPERATIONAL:
            ;
    END_CASE
    process_apply_mode_req_second_step(CONVERSION_this := prc);
END_IF;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_objects_manager" Id="{3dcb9128-47ec-428e-b765-321e3c21880f}">
      <Implementation>
        <ST><![CDATA[IF objects_initialization()
THEN
    sub_process_init(
	    object_name 	:= 'csp_main_services.prc',
        process			:= csp_main.prc,
        CONVERSION_this			:= prc);

	prc_path 			:= process_get_path(prc);

	digital_output_init(
		object_name		:= CONCAT(prc_path, '_reset_output_test'),
		polarity_direct	:= TRUE,
		process			:= prc,
		CONVERSION_this	:= reset_output_test);
		
	iol_master_init(
		object_name := 			'iol_master_el6224_IO6100',
		device_name := 			'SPLC5000Slot19 (EL6224)',
		_type := 				IOL_MASTER_BECKHOFF_EL6224,
		ethercat_master :=		csp_main.cabinet_ethercat_master,
		process := 				prc,
		CONVERSION_this := 		iol_master_el6224_IO6100);
		
		
	digital_check_and_message_init(
		object_name			:= CONCAT(prc_path, '_no_pressure_dchk'),
		alarm_if_input_off	:= FALSE,
		alarm_delay			:= pressure_check_delay,
		enabled_at_powerup	:= TRUE,
		individual_reset	:= FALSE,
		machine_reaction	:= MACHINE_REACTION_EMERGENCY_STOP,
		typology			:= MESSAGE_TYPOLOGY_EMERGENCY,
		process				:= prc,
		CONVERSION_this		:= no_pressure_dchk);

	boolean_init(
		object_name			:= CONCAT(prc_path, '_pressure_level_boolean'),
		process				:= prc,
		CONVERSION_this		:= pressure_level_low_bool);

	digital_check_add_boolean(
		boolean				:= pressure_level_low_bool,
		CONVERSION_this		:= no_pressure_dchk);

		
	motorization_conditioner_init(
		object_name					:=	CONCAT(prc_path, '_air_not_above_limit_motcond'),
		velocity_limit				:=	0.0,
		velocity_limit_active		:=	FALSE,
		idle_handshake_active		:=	FALSE,
		execute_handshake_active	:=	TRUE,
		hold_handshake_active		:=	FALSE,
		suspend_handshake_active	:=	FALSE,
		complete_handshake_active	:=	FALSE,
		abort_handshake_active		:=	FALSE,
		stop_handshake_active		:=	FALSE,
		origin						:=	MOTORIZATION_CONDITIONER_ORIGIN_INTERNAL,
		manager						:=	csp_main_motorization_manager.motm,
		process						:=	prc,
		CONVERSION_this				:=	air_not_above_limit_motcond);
		
END_IF

IF objects_running()
THEN
	process_cycle(prc);
	iol_master_cycle(iol_master_el6224_IO6100);
	digital_check_cycle(no_pressure_dchk);
	motorization_conditioner_cycle(air_not_above_limit_motcond);
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_read_process_image" Id="{7e70a610-28a2-415a-9cb1-ffdac1405651}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_read_var_input" Id="{4c37f78b-3672-4295-8c24-a7e69cdd25d0}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_set_runtime_properties" Id="{58b15623-9aa9-4d18-ad02-7d2ed70db1da}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_write_output" Id="{96d2eb90-e6fd-4e9c-aef7-f74e1fd34e08}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>