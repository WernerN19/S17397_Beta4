<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="csp_main_motorization_speedBalance" Id="{10282163-e45a-4758-933f-493c0b883170}" SpecialFunc="None">
    <Declaration><![CDATA[(*********************************** G.D S.p.A. - Technical Department ***********************************
============= PROGRAM INFO ============
FOLDER:             TBD
MACHINES INVOLVED:  TBD 

============= DESCRIPTION =============
csp main program

============= REVISIONS ===============
Date		Version	 	Author      	Description             
----------	-------		------------  	--------------------------------------------
2019/10/07 	0000.00	 	W.Gerstner		Creation of the PRG

**********************************************************************************************************)
(*$R
	process_ref := prc;
$*)
PROGRAM csp_main_motorization_speedBalance
VAR
	prc:												process;
	prc_path:											STRING;
	
	motcond:											motorization_conditioner;
	
	overspeed_ratio:									LREAL;
	overspeed_value:									LREAL;
	Overspeed_active: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[_read_var_input();

_object_manager();

IF NOT objects_running()
THEN
	RETURN;	
END_IF

_read_process_image();

_mode_manager();

CASE process_get_mode(prc) of
	MODE_ABSENT,
	MODE_INACTIVE:
		RETURN;
	MODE_TEST:
		_handle_process_test();
END_CASE

_set_runtime_properties();

(********************************* BODY *********************************)

overspeed_ratio := csp_main_brand.surge_case_rate_ppm / csp_main_brand.nominal_case_rate_ppm;
overspeed_value := (
						motorization_manager_get_nominal_velocity(csp_main_motorization_manager.motm)
						* 
						overspeed_ratio
					) 
					- motorization_manager_get_nominal_velocity(csp_main_motorization_manager.motm);


motorization_conditioner_set_overspeed(
			overspeed_value := overspeed_value,
			CONVERSION_this := motcond);

			
(* TO RUN MACHINE AT OVERSPEED *)
IF csp_transfer_infeed_accumulation_level.level_status = CSP_TRANSFER_INFEED_ACCUMULATION_LEVEL_STATUS_NORMAL
	OR csp_transfer_infeed_accumulation_level.level_status = CSP_TRANSFER_INFEED_ACCUMULATION_LEVEL_STATUS_JAM
	AND axis_is_moving(csp_main_motorization_virtualManager.axis)
	AND csp_main_motorization_virtualManager.axis.actual_position < 10 // USED TO VEROFY NEW SPEED IS GIVEN ONLY JUST BEFORE INDEX
THEN
	motorization_conditioner_overspeed_activate(motcond);
END_IF

(* TO TURN OFF OVERSPEED - SURGE *)
IF (
	motorization_conditioner_is_active(motcond)
	AND axis_is_moving(csp_main_motorization_virtualManager.axis)
	AND csp_main_motorization_virtualManager.axis.actual_position < 10 // USED TO VEROFY NEW SPEED IS GIVEN ONLY JUST BEFORE INDEX
	AND csp_transfer_infeed_accumulation_level.level_status < CSP_TRANSFER_INFEED_ACCUMULATION_LEVEL_STATUS_LOW
	)
	OR machine_is_stopped(csp.mch)
	OR machine_is_stop_emergency_active(csp.mch)
	OR NOT axis_is_moving(csp_main_motorization_virtualManager.axis)
THEN
	motorization_conditioner_overspeed_deactivate(motcond);
END_IF

IF motcond.status = MOTORIZATION_CONDITIONER_STATUS_OVERSPEED_ACTIVE
THEN
	Overspeed_active := TRUE;
ELSE
	Overspeed_active := FALSE;
END_IF


(************************************************************************)

_handle_messages();

_write_output();]]></ST>
    </Implementation>
    <Action Name="_handle_messages" Id="{0a8f2262-d8fc-4a10-abde-4ccf8600a534}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_handle_process_test" Id="{90bcb670-48b9-4801-9032-8888343976ec}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_mode_manager" Id="{b0fb20e9-8384-4d2b-abec-3ad2680ce51e}">
      <Implementation>
        <ST><![CDATA[IF process_mode_req_is_pending(prc)
THEN
    process_apply_mode_req_first_step(prc);
    CASE process_get_mode(prc) OF
        MODE_TO_ABSENT:
			;
        MODE_TO_INACTIVE:
			;
        MODE_TO_TEST:
			;
        MODE_TO_OPERATIONAL:
			;
    END_CASE
    process_apply_mode_req_second_step(prc);
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_object_manager" Id="{90c66d83-baa7-4bd4-84f0-e9a84469a040}">
      <Implementation>
        <ST><![CDATA[IF objects_initialization()
THEN
	sub_process_init(
		object_name								:= 'csp_main_motorization_speedBalance.prc', 
		process									:= csp_main_motorization.prc, 
		CONVERSION_this							:= prc);
		
	prc_path 									:= process_get_path(prc);
	
	motorization_conditioner_init(
		object_name								:=	CONCAT(prc_path, '_motcond'),
		velocity_limit							:=	100.0,
		velocity_limit_active					:=	FALSE,
		idle_handshake_active					:=	FALSE,
		execute_handshake_active				:=	FALSE,
		hold_handshake_active					:=	FALSE,
		suspend_handshake_active				:=	FALSE,
		complete_handshake_active				:=	FALSE,
		abort_handshake_active					:=	FALSE,
		stop_handshake_active					:=	FALSE,
		origin									:=	MOTORIZATION_CONDITIONER_ORIGIN_INTERNAL,
		manager									:=	csp_main_motorization_manager.motm,
		process									:=	prc,
		CONVERSION_this							:=	motcond);
	
END_IF

IF objects_running()
THEN
	process_cycle(prc);
	motorization_conditioner_cycle(motcond);
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_read_process_image" Id="{82654831-34b6-40d9-afea-3c5d73350014}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_read_var_input" Id="{3017a0d5-8dac-4d29-9d88-fd27f28e28c7}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_set_runtime_properties" Id="{ddc173ec-7391-410f-9f05-8ae79617c215}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_write_output" Id="{f2ce4555-6661-42b1-9c98-40fa227de696}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>