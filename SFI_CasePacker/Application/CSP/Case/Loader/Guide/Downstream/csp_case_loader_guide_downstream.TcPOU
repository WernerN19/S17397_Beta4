<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="csp_case_loader_guide_downstream" Id="{c5f4f4f8-c1fc-4f51-a9f1-2eb5bb8025f5}" SpecialFunc="None">
    <Declaration><![CDATA[(*********************************** G.D S.p.A. - Technical Department ***********************************
============= PROGRAM INFO ============
FOLDER:             TBD
MACHINES INVOLVED:  TBD 

============= DESCRIPTION =============
csp machine declaration

============= REVISIONS ===============
Date		Version	 	Author      	Description             
----------	-------		------------  	--------------------------------------------
2019/04/05 	0000.00	 	M.Grasso		Creation of the PRG

**********************************************************************************************************)
(*$R process_ref := prc; $*)
PROGRAM csp_case_loader_guide_downstream
VAR
	
	prc:												process;
	prc_path:											STRING;
	
	fsm_enable_condition:								BOOL := FALSE;
	fsm_next_status:									CSP_CASE_LOADER_STATUS_enum;
	fsm_status:											CSP_CASE_LOADER_STATUS_enum;
	
	axis:												axis;
	phase_velocity_degps:								LREAL := 20;
	axis_calculate_cam_slave_master_position_deg:		LREAL := 0.0;
	axis_calculated_cam_slave_position_deg:				LREAL := 0.0;
	slave_position_has_been_calculated:					BOOL  := FALSE;
	engage_enable:										BOOL:=TRUE;
	disable_req:										BOOL:=FALSE;
	debug_state_machine:								BOOL:=FALSE;
	debug_state_machine_one_step:						BOOL:=FALSE;
	phase_enable:										BOOL:=TRUE;
	cam_id:												INT := CASE_LOADER_GUIDE_RUN_CAM;
	slave_scaling:										LREAL := 80; (*$P $*)
	master_scaling:										LREAL := 1; 
	master_offset:										LREAL := 300;(*$P $*)
	slave_offset: 										LREAL := 0;(*$P $*)

	
	
	in_accu_safe_pos:                                   BOOL := FALSE;
    accu_tolerance:                                     LREAL := 5;
    accu_safe_pos:                                      LREAL := 0;
	
	torque_limit:										INT := 2000;    (*$P $*)
	torque_limit_old:									INT;		
	
	direction_FWD: 										BOOL;
	servo_on_condition: 								BOOL;
	enable_delay: 										TON;
	Torque_force_constant: 								LREAL := 0.47;
	phase_tolerance: 									INT := 4;
	phase_done: 										BOOL := FALSE;
	phase_required_loader_guide_length: 				BOOL := FALSE;
	phase_decision_made: 								BOOL := TRUE;
	phase_decision_ready: 								BOOL := FALSE;
END_VAR

VAR CONSTANT
	(*Just in case you prefer having constants instead of numbers*)
	MOTOR_MAX_VELOCITY_DEGPS:				LREAL := 9600;
	MOTOR_MAX_ACCELLERATION_DEGPS2:			LREAL := 4800;
	MOTOR_MAX_DECELLERATION_DEGPS2:			LREAL := 4800;
	MOTOR_MAX_JERK_DEGPS3:					LREAL := 100000000; 
	MOTOR_MAX_FOLLOWING_ERROR_DEG:			LREAL := 2;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[_read_var_input();

_object_manager();

IF NOT objects_running()
THEN
	RETURN;	
END_IF

_read_process_image();

_mode_manager();

CASE process_get_mode(prc) OF
	MODE_ABSENT:
		IF axis_get_mode(axis) = MODE_TEST
		THEN
			safety_integrated_series_close(csp_case_main_safety_drives_SD8300.chB_smes_sis);
		END_IF
		RETURN;
	MODE_INACTIVE:
		RETURN;
	MODE_TEST:
		_handle_process_test();
END_CASE

_set_runtime_properties();

(********************************* BODY *********************************)
axis.actual_torque := (axis.actual_current * Torque_force_constant)/1000;

(*FSM Control*)

(*disable_req *) //read_var_input

//Checks if axis position is within the acc-u-change safe position			
IF 	ABS(axis.actual_position - accu_safe_pos)  < accu_tolerance
	OR (360 - axis.actual_position) < accu_tolerance
THEN
	in_accu_safe_pos := TRUE;
ELSE
	in_accu_safe_pos := FALSE;   
END_IF	
			
// Sets the torque limit for the loader guide upstream
IF torque_limit <> Torque_limit_old
	THEN
	IF soe_drive_channel_write_parameter(
		channel:=csp_case_loader_guide_downstream.axis.soe_drive_channel, 
		idn:= S_0_IDN + 92, 
		data_element:=soe_drive_element_value , 
		data_source:= ADR(torque_limit), 
		data_lenght:= SIZEOF(torque_limit), 
		CONVERSION_this:= csp_case_loader_guide_downstream.axis.soe_drive^)= SOE_DRIVE_RETURN_VALUE_DONE
		THEN
		torque_limit_old := Torque_limit;
	END_IF	
end_if
				
fsm_enable_condition := axis_is_ok(FALSE, axis)
						AND
						process_is_ready(prc)
						AND
						process_subtree_is_ready(prc)
						AND
						servo_on_condition
						AND						
						(csp_main_motorization.motorization_axis_redefined_at_powerup OR csp_main_accuchange.Brand_Change_Occurred)
						//AND
						//NOT jog_manager_is_jog_axis_active(SMTR8323_CASE_LOADER_GUIDE_DOWNSTREAM, csp_main_jogManager.jog_manager_real)
						AND
						NOT disable_req;

IF	NOT fsm_enable_condition
	AND
	fsm_status <> CSP_CASE_LOADER_STATUS_DISABLED
	AND
	fsm_status < CSP_CASE_LOADER_STATUS_STOP_REQUEST
THEN
	fsm_status	:=	CSP_CASE_LOADER_STATUS_DISABLE_REQUEST;
END_IF;



	
CASE fsm_status OF
	
	CSP_CASE_LOADER_STATUS_NOT_INITIALIZED:
	
        IF	axis_is_ok(return_when_absent := TRUE, CONVERSION_this := axis)
        THEN
            fsm_next_status := CSP_CASE_LOADER_STATUS_DISABLED;
        END_IF

	CSP_CASE_LOADER_STATUS_DISABLED:
	
		phase_done := FALSE;
		phase_decision_made := FALSE;
		phase_required_loader_guide_length := FALSE;
		phase_decision_ready := FALSE;
		IF	fsm_enable_condition
			AND
			(
				(motorization_manager_is_starting(csp_main_motorization_manager.motm))
				OR
				jog_manager_is_jog_axis_active(JOG_LIST_CSP_CASE_LOADER_VIRTUAL, csp_main_jogManager.jog_manager_virtual)
				//OR
				//jog_manager_is_jog_axis_active(JOG_LIST_CSP_CASE_VIRTUAL, csp_main_jogManager.jog_manager_virtual)	
			)
		THEN
			debug_state_machine := FALSE;
			fsm_next_status := CSP_CASE_LOADER_STATUS_ENABLE_REQUEST;
		END_IF;

	CSP_CASE_LOADER_STATUS_ENABLE_REQUEST:
	
		axis_enable(axis);
		IF axis_is_standstill(axis)
		THEN
			fsm_next_status	:=	CSP_CASE_LOADER_STATUS_ENABLED;
		END_IF;		

	CSP_CASE_LOADER_STATUS_ENABLED:

		IF 	NOT csp_main_accuChange.machine_size_complete
		THEN
			fsm_next_status	:= CSP_CASE_LOADER_STATUS_CHANGE_OVER_MODE;
		ELSE	
			fsm_next_status	:=	CSP_CASE_LOADER_STATUS_HOME_REQUEST;
		END_IF
		

	CSP_CASE_LOADER_STATUS_CHANGE_OVER_MODE:
	
		IF 	csp_main_accuChange.Brand_Change_Occurred //AND csp_case_loader_pusher.axis.actual_position > 150  
			AND csp_case_loader_pusher.in_accu_safe_pos
			AND NOT in_accu_safe_pos
		THEN
			axis_move_absolute(
				position 		:= accu_safe_pos,
				velocity 		:= motorization_manager_get_nominal_velocity(csp_main_motorization_manager.motm)*6,
				direction		:= AXIS_SHORTEST_WAY,
				acceleration 	:= MOTOR_MAX_ACCELLERATION_DEGPS2,
				deceleration 	:= MOTOR_MAX_DECELLERATION_DEGPS2,
				jerk 			:= MOTOR_MAX_JERK_DEGPS3, 
				buffer_mode 	:= AXIS_BUFFER_MODE_BUFFERED,
				CONVERSION_this := axis); 			

		END_IF;				
				
		IF 	csp_main_accuChange.Motion_Motors_New_Size_Req
		THEN
			fsm_next_status	:=	CSP_CASE_LOADER_STATUS_HOME_REQUEST;
		END_IF;	
		
	CSP_CASE_LOADER_STATUS_HOME_REQUEST: 

		fsm_next_status	:=	CSP_CASE_LOADER_STATUS_HOME_DONE;

	CSP_CASE_LOADER_STATUS_HOMING:

		axis.home.done := TRUE;

		IF axis_home_done(axis)
		THEN
			fsm_next_status	:=	CSP_CASE_LOADER_STATUS_HOME_DONE;
		END_IF

	CSP_CASE_LOADER_STATUS_HOME_DONE:
	
		IF phase_enable
		THEN
			fsm_next_status	:= CSP_CASE_LOADER_STATUS_CALCULATE_SLAVE_POSITION_REQUEST;
		END_IF
		
	CSP_CASE_LOADER_STATUS_CALCULATE_SLAVE_POSITION_REQUEST:
	
		(*Calculate a desired master axis position.
		Function used  LMOD: Ex. LMOD(400.56, 360) = 40.56
		home_position_master_offset_deg is helpful for changing the 1st term of LMOD*)
		axis_calculate_cam_slave_master_position_deg := 
		LMOD	(axis_get_actual_modulo_position(csp_case_loader_virtualMaster.axis) (*master axis*)
							+
				master_offset, (*initialized at 0° position*)
					G_MODULO_360_DEG											);
		(*master_scaling and slave_scaling initialized at 360° since the cams are normed in a range equal to 0-1.*)

			IF axis_calculate_cam_slave_dynamics_data(
					cam_id := cam_id,
					master_scaling := master_scaling,
					master_position := axis_calculate_cam_slave_master_position_deg,
					slave_scaling := slave_scaling,
					CONVERSION_this := axis)
			THEN
				fsm_next_status := CSP_CASE_LOADER_STATUS_CALCULATING_SLAVE_POSITION;
			END_IF

	CSP_CASE_LOADER_STATUS_CALCULATING_SLAVE_POSITION:
	
		IF	axis_cam_slave_dynamics_data_calculated(axis)
		THEN
		(*The “axis_get_cam_slave_dynamics_position” method returns the position of the slave within the cam plate table at the master position calculated for the instance specified: *)
			axis_calculated_cam_slave_position_deg :=(axis_get_cam_slave_dynamics_position(axis)+ slave_offset);	
			slave_position_has_been_calculated := TRUE;
	
			IF 	axis.actual_position > axis_calculated_cam_slave_position_deg
			THEN 
				direction_FWD := FALSE;	// backward
			ELSIF axis.actual_position < axis_calculated_cam_slave_position_deg
			THEN
				direction_FWD := TRUE; //forward
			END_IF
			
			
		IF	(
				(	//checking if within phase tolerance to then do simple re-phase; else go to advanced phase with loader length
					ABS(axis_calculated_cam_slave_position_deg - axis_get_actual_modulo_position(axis)) > phase_tolerance
				)
					AND //also checks the upstream guide so that that both axis stay synced in respective state machines.
				(
					ABS(csp_case_loader_guide_upstream.axis_calculated_cam_slave_position_deg - axis_get_actual_modulo_position(csp_case_loader_guide_upstream.axis)) > phase_tolerance
				)	
			)
			AND csp_case_loader_virtualMaster.axis.actual_position < 55 //guides are open at this point, so no advanced phasing needed as no interference should be present
		THEN
				phase_decision_made := TRUE;
				fsm_next_status := CSP_CASE_LOADER_STATUS_LOADER_PLATE_PHASE_REQUIRED; //outside tolerance, wait for loader guide length to move out to phase
		ELSE
				phase_decision_made := TRUE;
				fsm_next_status := CSP_CASE_LOADER_STATUS_PHASE_REQUEST; //within tolerance, go to phasing immediately
			END_IF
			
		END_IF
	
	CSP_CASE_LOADER_STATUS_LOADER_PLATE_PHASE_REQUIRED:
		
		phase_required_loader_guide_length := TRUE;
		phase_decision_ready := TRUE;
		IF 	csp_case_loader_guide_length.in_extended_phase_pos
		THEN
			fsm_next_status := CSP_CASE_LOADER_STATUS_PHASE_REQUEST; //loader guide length has exteded to remove interference for phasing guides.
		END_IF


	CSP_CASE_LOADER_STATUS_PHASE_REQUEST:
	
		phase_decision_ready := TRUE;
		IF	axis_is_standstill(axis)
		THEN
			 axis_move_absolute(
				position 		:= axis_calculated_cam_slave_position_deg,(*calculated above, the slave is moved*)
				velocity 		:= phase_velocity_degps,
				direction		:= AXIS_SHORTEST_WAY,
				acceleration 	:= MOTOR_MAX_ACCELLERATION_DEGPS2,
				deceleration 	:= MOTOR_MAX_DECELLERATION_DEGPS2,
				jerk 			:= MOTOR_MAX_JERK_DEGPS3, 
				buffer_mode 	:= AXIS_BUFFER_MODE_BUFFERED,
				CONVERSION_this 			:= axis
				); 
			
		END_IF

		IF axis_is_absolute_moving(axis)
		THEN
			fsm_next_status	:=	CSP_CASE_LOADER_STATUS_PHASING;
		END_IF

	CSP_CASE_LOADER_STATUS_PHASING:

		IF 	axis_is_standstill(axis)
		THEN
			phase_done := TRUE;
			fsm_next_status	:=	CSP_CASE_LOADER_STATUS_PHASED;
		END_IF

	CSP_CASE_LOADER_STATUS_PHASED:

		IF 	engage_enable
		THEN
			fsm_next_status := CSP_CASE_LOADER_STATUS_CAM_ENGAGED_REQ;
		END_IF


	CSP_CASE_LOADER_STATUS_CAM_ENGAGED_REQ:

		axis_engage_cam(
			cam_id 			:= cam_id,
			master_engage_mode 	:= AXIS_CAM_ENGAGE_ABSOLUTE,
			slave_engage_mode 	:= AXIS_CAM_ENGAGE_ABSOLUTE, 
			activation_mode 	:= AXIS_CAM_ACTIVATION_IMMEDIATELY, 
			activation_position	:= 0,
			master_scaling_mode	:= AXIS_CAM_SCALING_MODE_USER_DEFINED,
			slave_scaling_mode	:= AXIS_CAM_SCALING_MODE_USER_DEFINED,
			master_offset 		:= master_offset,	//axis_calculate_cam_slave_master_position_deg, (*moved right  respect to the original Y axis of the cam profile*)
			slave_offset 		:= slave_offset,	//- axis_calculated_cam_slave_position_deg,  (*slave moved down of the same quantity already used in CSP_MACHINE_STATUS_PHASE_REQUEST via axis_move_absolute(..) *)
			master_scaling 		:= master_scaling,
			slave_scaling 		:= slave_scaling,
			interpolation_type 		:= AXIS_CAM_INTERPOLATION_SYSTEM_DEFAULT,
			master 			:= csp_case_loader_virtualMaster.axis,
			CONVERSION_this 	:= axis);	
		
	
		IF	axis_is_cam_engaged(axis)
		THEN
			fsm_next_status := CSP_CASE_LOADER_STATUS_CAM_ENGAGED;
		END_IF

	
	CSP_CASE_LOADER_STATUS_AXIS_ENGAGE_VERIFY :
		;
		
	CSP_CASE_LOADER_STATUS_CAM_ENGAGED:
	
		IF 	machine_is_stop_emergency_active(csp.mch)
			AND motorization_manager_is_stopped(csp_main_motorization_manager.motm)
		THEN
			fsm_next_status := CSP_CASE_LOADER_STATUS_DISENGAGE_REQUEST;
		END_IF
		
	CSP_CASE_LOADER_STATUS_RUNNING:

		;
		
	CSP_CASE_LOADER_STATUS_DISENGAGE_REQUEST:

		fsm_next_status := CSP_CASE_LOADER_STATUS_DISENGAGING;
		
	CSP_CASE_LOADER_STATUS_DISENGAGING:
	
		IF 	axis_disengage(
				mode:= AXIS_DISENGAGE_AND_ON_PHASE_STOP, 
				position:= 0, 
				velocity:= 0, 
				acceleration:= MOTOR_MAX_ACCELLERATION_DEGPS2, 
				deceleration:= MOTOR_MAX_DECELLERATION_DEGPS2, 
				jerk:= MOTOR_MAX_JERK_DEGPS3, 
				CONVERSION_this:= axis)
		THEN
			fsm_next_status := CSP_CASE_LOADER_STATUS_CAM_ENGAGED_REQ;
		END_IF
	
	CSP_CASE_LOADER_STATUS_STOP_REQUEST:

		axis_stop(
		    deceleration 	:= MOTOR_MAX_DECELLERATION_DEGPS2,
		    jerk 			:= MOTOR_MAX_JERK_DEGPS3,
		    CONVERSION_this 			:= axis);

		IF 	axis_is_standstill(axis)
			OR
			NOT axis_is_ok(FALSE, axis)
			OR
			axis_is_disabled(axis)
		THEN
			fsm_next_status := CSP_CASE_LOADER_STATUS_DISABLE_REQUEST;
		END_IF

	CSP_CASE_LOADER_STATUS_DISABLE_REQUEST:
	
   		axis_disable(axis);
   		fsm_next_status := CSP_CASE_LOADER_STATUS_DISABLING;

	CSP_CASE_LOADER_STATUS_DISABLING:
	
        IF	axis_is_disabled(axis)
        THEN
            fsm_next_status := CSP_CASE_LOADER_STATUS_DISABLED;
        END_IF

END_CASE;

IF 	NOT debug_state_machine
	OR
	debug_state_machine_one_step
THEN
	fsm_status := fsm_next_status;
	debug_state_machine_one_step := FALSE;
END_IF

(************************************************************************)

_handle_messages();

_write_output();]]></ST>
    </Implementation>
    <Action Name="_handle_messages" Id="{5627fa5e-579e-474d-b303-3a4edebb40e4}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_handle_process_test" Id="{73572ac0-4430-4617-8ea1-b58b6b59360b}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_mode_manager" Id="{729228de-5c10-4f21-ba90-0717a60ecf43}">
      <Implementation>
        <ST><![CDATA[IF process_mode_req_is_pending(prc)
THEN
    process_apply_mode_req_first_step(prc);
    CASE process_get_mode(prc) OF
        MODE_TO_ABSENT:
			;
        MODE_TO_INACTIVE:
			;
        MODE_TO_TEST:
			;
        MODE_TO_OPERATIONAL:
			;
    END_CASE
    process_apply_mode_req_second_step(prc);
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_object_manager" Id="{b4e7607c-91c9-4647-a881-ccdb98a119e7}">
      <Implementation>
        <ST><![CDATA[IF objects_initialization()
THEN
	sub_process_init(
		object_name					:= 'csp_case_loader_guide_downstream.prc', 
		process						:= csp_case_loader_guide.prc, 
		CONVERSION_this				:= prc);
		
	prc_path 						:= process_get_path(prc);
	
(* axis smes *)
	IF csp_main_configurator.Physical_hw
	THEN

	axis_init(
		object_name								:= CONCAT(prc_path, '_axis'), 
		axis_type								:= AXIS_TYPE_SERVO, 
		encoder_scaling_factor					:= G_SERVO_ENCODER_SCALING_FACTOR_DEGPINC,
		modulo									:= G_MODULO_360_DEG, 
		process									:= prc, 
		CONVERSION_this							:= axis);
		
	axis_add_safety_integrated_series(
		safety_integrated_series 	:= csp_case_main_safety_drives_SD8300.chB_smes_sis,
		CONVERSION_this				:= axis);
		
	axis_init_absolute_encoder_preset(
		position                                := 0.0,
		CONVERSION_this                         := axis);
		
		
ELSE
	axis_init(
		object_name								:= CONCAT(prc_path, '_axis'), 
		axis_type								:= AXIS_TYPE_VIRTUAL, 
		encoder_scaling_factor					:= G_VIRTUAL_ENCODER_SCALING_FACTOR_DEGPINC,
		modulo									:= G_MODULO_360_DEG, 
		process									:= prc, 
		CONVERSION_this							:= axis);		
			
	END_IF
	
	axis_set_max_dynamic(
		reference_velocity						:=	MOTOR_MAX_VELOCITY_DEGPS,
		velocity								:=	MOTOR_MAX_VELOCITY_DEGPS,
		acceleration							:=	MOTOR_MAX_ACCELLERATION_DEGPS2,
		deceleration							:=	MOTOR_MAX_DECELLERATION_DEGPS2,
		jerk									:=	MOTOR_MAX_JERK_DEGPS3,
		following_error							:=	MOTOR_MAX_FOLLOWING_ERROR_DEG,
		CONVERSION_this							:=	axis);
	
	jog_manager_add_axis(
		list_index								:= SMTR8323_CASE_LOADER_GUIDE_DOWNSTREAM,
		axis									:= axis,
		master_axis								:= FALSE,
		jog_type								:= JOG_TYPE_LINEAR,
		sw_limit_positive						:= 800,
		sw_limit_negative						:= 0,
		CONVERSION_this							:= csp_main_jogManager.jog_manager_real);	
	
	axis_add_soe_drive(
		channel						:=	SOE_DRIVE_CHANNEL_B,
		soe_drive					:=	csp_case_main_drives.SD8300_drv,
		CONVERSION_this				:=	axis);

END_IF

IF objects_running()
THEN
	process_cycle(prc);
	axis_cycle(axis);
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_read_process_image" Id="{e79c7e05-db48-4ece-97e7-d7c513bdd403}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_read_var_input" Id="{cba23d7b-b798-41a8-824b-a81ac676b881}">
      <Implementation>
        <ST><![CDATA[disable_req := csp_case.disable_req;
;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_set_runtime_properties" Id="{08c7d0f7-d496-4e1b-b00d-8e8188ab7bf4}">
      <Implementation>
        <ST><![CDATA[enable_delay(IN:=axis_is_ready_to_enable(axis) , PT:=T#2S , Q=> servo_on_condition , ET=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="_write_output" Id="{bef8ed73-3ddf-45a0-9a01-bc08f4aeb8af}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>