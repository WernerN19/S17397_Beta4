<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="csp_case_transport_os_minorPlow" Id="{9290fcb5-2ef3-44d5-bb93-21ba64caed98}" SpecialFunc="None">
    <Declaration><![CDATA[(*********************************** G.D S.p.A. - Technical Department ***********************************
============= PROGRAM INFO ============
FOLDER:             TBD
MACHINES INVOLVED:  TBD 

============= DESCRIPTION =============
csp machine declaration

============= REVISIONS ===============
Date		Version	 	Author      	Description             
----------	-------		------------  	--------------------------------------------
2019/04/05 	0000.00	 	M.Grasso		Creation of the PRG

**********************************************************************************************************)
(*$R process_ref := prc; $*)
PROGRAM csp_case_transport_os_minorPlow
VAR
	
	prc:											process;
	prc_path:										STRING;
	
	shift_do:										digital_output;
	shift_sact:										digital_actuator;
	fwd_di:											digital_input;
	bwd_di:											digital_input;
	
	size_requires_plow: 							BOOL; (*$P $*)
	plow_test: 										BOOL := true;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[_read_var_input();

_object_manager();

IF NOT objects_running()
THEN
	RETURN;	
END_IF

_read_process_image();

_mode_manager();

CASE process_get_mode(prc) OF
	MODE_ABSENT,
	MODE_INACTIVE:
		RETURN;
	MODE_TEST:
		_handle_process_test();
END_CASE

_set_runtime_properties();

(********************************* BODY *********************************)

IF csp_main_brand.p_carton_format > 18 
	OR
	plow_test //AMR //remove after testing
	THEN
  	size_requires_plow := TRUE;
	ELSE
	size_requires_plow := FALSE;	

END_IF

IF  size_requires_plow AND digital_input_is_active(csp_case_flapControl_backStop.present_di) 
	THEN
	digital_output_set(shift_do);
    digital_actuator_message_enable(shift_sact); 
	ELSE
	digital_output_reset(shift_do);
	digital_actuator_message_disable(shift_sact);	
	
END_IF

(************************************************************************)

_handle_messages();

_write_output();
]]></ST>
    </Implementation>
    <Action Name="_handle_messages" Id="{7de3d52e-98db-4ef2-889b-62882dd3cec2}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_handle_process_test" Id="{e8134765-8a5a-4ed9-8755-cb7cca57e526}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_mode_manager" Id="{6f47510e-bce1-44e1-be69-6dba8541e609}">
      <Implementation>
        <ST><![CDATA[IF process_mode_req_is_pending(prc)
THEN
    process_apply_mode_req_first_step(prc);
    CASE process_get_mode(prc) OF
        MODE_TO_ABSENT:
			;
        MODE_TO_INACTIVE:
			;
        MODE_TO_TEST:
			;
        MODE_TO_OPERATIONAL:
			;
    END_CASE
    process_apply_mode_req_second_step(prc);
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_object_manager" Id="{8fcad314-0e07-4a96-be0d-9016b7f689a5}">
      <Implementation>
        <ST><![CDATA[IF objects_initialization()
THEN
	sub_process_init(
		object_name					:= 'csp_case_transport_os_minorPlow.prc', 
		process						:= csp_case_transport_os.prc, 
		CONVERSION_this				:= prc);
		
	prc_path 						:= process_get_path(prc);
	
	digital_output_init(
		object_name					:= CONCAT(prc_path, '_shift_do'), 
		polarity_direct				:= TRUE, 
		process						:= prc, 
		CONVERSION_this				:= shift_do);
		
	digital_input_init(
		object_name					:= CONCAT(prc_path, '_fwd_di'), 
		polarity_direct				:= TRUE, 
		process						:= prc, 
		CONVERSION_this				:= fwd_di);
		
	digital_input_init(
		object_name					:= CONCAT(prc_path, '_bwd_di'), 
		polarity_direct				:= TRUE, 
		process						:= prc, 
		CONVERSION_this				:= bwd_di);
	
	digital_actuator_init(			
		object_name					:=CONCAT(prc_path, '_shift_sact'), 
		_type           			:=DIGITAL_ACTUATOR_TYPE_IN_AI,    
		fault_reaction 				:= DIGITAL_ACTUATOR_FAULT_REACTION_DEACTIVATING,
		active_time     			:= 1000,
		inactive_time   			:= 1000,
		dout            			:= shift_do,
		process         			:= prc,
		conversion_this 			:=shift_sact);

	digital_actuator_add_di_active(
		di_active   				:= fwd_di,
		conversion_this 			:=shift_sact);

    digital_actuator_add_di_inactive(
		di_inactive 				:= bwd_di,
		conversion_this 			:=shift_sact); 
		
END_IF

IF objects_running()
THEN
	process_cycle(prc);
	digital_actuator_cycle(shift_sact);
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_read_process_image" Id="{69926a9d-d1ff-4c69-b567-50f7b5af88ba}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_read_var_input" Id="{e73267b9-b98f-4200-81f3-709384023ec9}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_set_runtime_properties" Id="{56ec8a8b-441a-4111-9bfc-d180f286cdb6}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_write_output" Id="{339be801-4224-4453-afa5-246674b561c1}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>