<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="csp_case_feed_magazine_accU_osDepth" Id="{15b93663-aa09-4196-813e-10ab2faac42f}" SpecialFunc="None">
    <Declaration><![CDATA[(*********************************** G.D S.p.A. - Technical Department ***********************************
============= PROGRAM INFO ============
FOLDER:             TBD
MACHINES INVOLVED:  TBD 

============= DESCRIPTION =============
csp machine declaration

============= REVISIONS ===============
Date		Version	 	Author      	Description             
----------	-------		------------  	--------------------------------------------
2019/04/05 	0000.00	 	M.Grasso		Creation of the PRG
2020/05/05 	0000.01	 	G.Imbriaco		From original author, G.Imbriaco: AccU Change motor with absolute encoder and brake.
										If position_req_mm parameter different from actual_pos_mm and machine reset_edge
										the motor move to position_req then disable again
										Manual movement with basc axis object under test( preset, moving,...)
										All disabled if main accU_Change is not Operational

**********************************************************************************************************)
(*$R process_ref := prc; $*)
PROGRAM csp_case_feed_magazine_accU_osDepth
VAR
	
	prc:											process;
	prc_path:										STRING;
	
	axis:											axis;
	Slot31_drv:										coe_drive;
	
	not_in_position:								message;
	axis_restore_absolute_position_fb:				restore_absolute_position_with_retain_fb;

	disable_req:									BOOL:=FALSE;
	position_req_mm:								LREAL:=0.0;(*$P unit:= mm; $*)
	move_velocity_req_mms:							LREAL:=10.0;(*$P unit:= mm; $*)
	position_req_tolerance_mm:						LREAL:=0.2;	(*$P $*)
	
	axis_status:									axis_status_enum := AXIS_STATUS_PARAMETERS_START;(*$M $*)
	in_position:									BOOL:=FALSE;(*$M $*)	
	actual_position_mm:								LREAL:=0.0; (*$M unit:= mm; $*)
	axis_move_condition:							BOOL:=FALSE;
	torque_limit:                                   INT := 5000;   
    torque_limit_old:                               INT;
	
	fsm_status:										csp_case_feed_magazine_accU_osDepth_enum;(*$M $*)
	fsm_next_status:								csp_case_feed_magazine_accU_osDepth_enum;
	fsm_enable_condition:							BOOL:=FALSE;
	debug_state_machine:							BOOL:=FALSE;
	debug_state_machine_one_step:					BOOL:=FALSE;
	NC_encoder_val AT %I*:							DINT;

	ACCEL_MMpSEC2:									LREAL :=100;
	DECEL_MMpSEC2:									LREAL :=100;
END_VAR
VAR PERSISTENT
	axis_restore_absolute_position_data:			restore_absolute_position_with_retain_struct;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[_read_var_input();

_object_manager();

IF NOT objects_running()
THEN
	RETURN;	
END_IF

_read_process_image();

_mode_manager();

CASE process_get_mode(prc) OF
	MODE_ABSENT,
	MODE_INACTIVE:
		RETURN;
	MODE_TEST:
		_handle_process_test();
END_CASE

_set_runtime_properties();

(********************************* BODY *********************************)
//Axis Torque Limit
IF torque_limit <> Torque_limit_old
    THEN
    IF coe_drive_write_parameter(
        index:=16#7010 ,
        complete_access:= FALSE ,
        sub_index:= 16#0B,
        data_source:= ADR(torque_limit),
        data_lenght:= SIZEOF(torque_limit),
        CONVERSION_this:=csp_case_feed_magazine_accU_osDepth.axis.coe_drive^ ) = COE_DRIVE_RETURN_VALUE_DONE
    THEN   
	 torque_limit_old := Torque_limit;
	END_IF
END_IF

//Axis move condition
IF 	csp_main_accuChange.case_feed_magazine_accU_osDepth_move_req
	OR
	(
		axis_move_condition
		AND
		NOT axis_is_disabled(axis)
	)
THEN
	axis_move_condition := TRUE;
ELSE
	axis_move_condition := FALSE;
END_IF

(*FSM Control*)
fsm_enable_condition := axis_is_ok(FALSE, axis)
						(*AND
						process_is_ready(prc) *)
						AND
						process_subtree_is_ready(prc)
						AND
						process_get_mode(csp_main_accuChange.prc) = MODE_OPERATIONAL	
						AND
						axis_restore_absolute_position_fb.o_position_restored	
						AND
						axis_move_condition
						AND
						NOT jog_manager_is_jog_axis_active(SMTR61230_CASE_FEED_MAGAZINE_OS_DEPTH, csp_main_jogManager.jog_manager_accuchange)
						AND
						NOT disable_req;	

										
IF	(NOT fsm_enable_condition
	OR
	disable_req)
	AND
	fsm_status <> CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_DISABLED
	AND
	fsm_status < CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_STOP_REQUEST
THEN
	fsm_status	:=	CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_STOP_REQUEST;
END_IF

CASE fsm_status OF
	
	CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_NOT_INITIALIZED:
	
        IF	axis_is_ok(return_when_absent := TRUE, CONVERSION_this := axis)
        THEN
            fsm_next_status := CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_DISABLED;
        END_IF
		

	CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_DISABLED:
	
		IF	fsm_enable_condition
		THEN
			(* Axis with absolute encoder, no home procedure request *)
			fsm_next_status := CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_POSITION_CHECK;
		END_IF;
		
	
	CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_POSITION_CHECK:

		(* CHECKS IF AXIS IS IN TOLERANCE *)
		IF 	NOT in_position
			AND machine_is_not_running(csp.mch)  
		THEN
			(* NOT IN TOLERANCE - NEED TO ENABLE AND MOVE *)
			fsm_next_status := CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_ENABLE_REQUEST;	
		ELSE
			(* ALREADY IN POSITION SO GO TO DISABLED *)
			fsm_next_status := CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_STOP_REQUEST;
		END_IF
				
			
	
	CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_ENABLE_REQUEST:
	
		axis_enable(axis);
		IF axis_is_standstill(axis)
		THEN
			fsm_next_status	:=	CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_ENABLED;
		END_IF	

		
	CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_ENABLED:
	
		IF axis_move_condition
			THEN
				fsm_next_status	:= CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_ABS_MOVE_REQUEST;	
		END_IF

		
	CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_ABS_MOVE_REQUEST:

		IF	axis_is_standstill(axis)
		THEN
			 axis_move_absolute(
				position 		:= position_req_mm,
				velocity 		:= move_velocity_req_mms,
				direction		:= AXIS_SHORTEST_WAY,
				acceleration 	:= ACCEL_MMpSEC2,
				deceleration 	:= DECEL_MMpSEC2,
				jerk 			:= csp_main_accuChange.CONSTANTS.MAX_JERK_MMpSEC3, 
				buffer_mode 	:= AXIS_BUFFER_MODE_BUFFERED,
				CONVERSION_this := axis
				); 
			fsm_next_status	:=	CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_ABS_MOVING;
		ELSE
			fsm_next_status	:=	CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_STOP_REQUEST;	
		END_IF

		
	CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_ABS_MOVING:

		IF axis_is_standstill(axis)
		THEN
			fsm_next_status := CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_STOP_REQUEST;
		END_IF
		
		
	CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_STOP_REQUEST:

		axis_stop(
		    deceleration 	:= csp_main_accuChange.CONSTANTS.MAX_DECELERATION_MMpSEC2 * 0.5,
		    jerk 			:= csp_main_accuChange.CONSTANTS.MAX_JERK_MMpSEC3,
		    CONVERSION_this 			:= axis);

		IF 	axis_is_standstill(axis)
			OR
			NOT axis_is_ok(FALSE, axis)
			OR
			axis_is_disabled(axis)
		THEN
			fsm_next_status := CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_DISABLE_REQUEST;
		END_IF

		
	CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_DISABLE_REQUEST:
	
   		axis_disable(axis);
        IF	axis_is_disabled(axis)
        THEN
            fsm_next_status := CSP_CASE_FEED_MAGAZINE_ACCU_OSDEPTH_STATUS_DISABLED;
        END_IF;

END_CASE;

IF NOT debug_state_machine
	OR
	debug_state_machine_one_step
THEN
	fsm_status := fsm_next_status;
	debug_state_machine_one_step := FALSE;
END_IF

(************************************************************************)
_brand_change();

_handle_messages();

_write_output();]]></ST>
    </Implementation>
    <Action Name="_brand_change" Id="{750f3f1f-6ee8-47e0-8160-fe3555775e81}">
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Action>
    <Action Name="_handle_messages" Id="{0cad49a1-84c6-4646-9b77-292c1483f24c}">
      <Implementation>
        <ST><![CDATA[IF in_position OR csp_main_jogManager.jog_is_active
THEN
	;//process_message_reset(not_in_position);
ELSE
	IF csp_main_accuChange.machine_size_complete = FALSE
	THEN
		;//process_message_reset(not_in_position);
	ELSE
		;//process_message_set(errorID_1:= 1, errorID_2:= 0, errorID_3:= 0, CONVERSION_this:= not_in_position);
	END_IF
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_handle_process_test" Id="{b3a85d5d-fa8a-4a2e-9946-f6c3b69ddeac}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_mode_manager" Id="{ed6d3790-4675-415d-9547-62977edd0a3b}">
      <Implementation>
        <ST><![CDATA[IF process_mode_req_is_pending(prc)
THEN
    process_apply_mode_req_first_step(prc);
    CASE process_get_mode(prc) OF
        MODE_TO_ABSENT:
			;
        MODE_TO_INACTIVE:
			;
        MODE_TO_TEST:
			;
        MODE_TO_OPERATIONAL:
			;
    END_CASE
    process_apply_mode_req_second_step(prc);
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_object_manager" Id="{fe203ce4-10af-4743-a316-b2edb1f22995}">
      <Implementation>
        <ST><![CDATA[IF objects_initialization()
THEN
	sub_process_init(
		object_name						:= 'csp_case_feed_magazine_accU_osDepth.prc', 
		process							:= csp_case_feed_magazine_accU.prc, 
		CONVERSION_this					:= prc);
			
	prc_path 							:= process_get_path(prc);
		
	IF csp_main_configurator.Physical_hw 
	THEN
		axis_init(
			object_name					:= CONCAT(prc_path, '_axis'), 
			axis_type					:= AXIS_TYPE_SERVO, 
			encoder_scaling_factor		:= 0.05*0.00000095367431640625,
 			modulo						:= 1024, 
  			process						:= prc, 
			CONVERSION_this				:= axis);

		axis_add_safety_integrated_series(
			safety_integrated_series	:= csp_case_main_safety_accuChange.sis,
			CONVERSION_this				:= axis);
			
		axis_init_absolute_encoder_preset(
			position                    := 0,
			CONVERSION_this             := axis);
	ELSE
		axis_init(
			object_name 				:= CONCAT(prc_path, '_axis'),
			axis_type 					:= AXIS_TYPE_VIRTUAL,
			encoder_scaling_factor 		:= G_VIRTUAL_ENCODER_SCALING_FACTOR_DEGPINC,
			modulo 						:= G_MODULO_360_DEG,
			process 					:= prc,
			CONVERSION_this 			:= axis);
	END_IF
	
	axis_set_rotation_direction(
		invert_encoder_counting			:= TRUE,
		invert_motor_polarity			:= TRUE,
		CONVERSION_this					:= axis);
		
	coe_drive_init(
		object_name 					:= CONCAT(prc_path, '_Slot31_drv'),
		device_name 					:= 'IO6100Slot31 (EL7211)',
		vendor 							:= DRIVE_BECKHOFF_EL72x1,
		mode 							:= COE_DRIVE_MODE_DRIVEN_BY_AXIS,
		ethercat_master					:= csp_main.cabinet_ethercat_master,
		process							:= prc,
		CONVERSION_this 				:= Slot31_drv);

	axis_add_coe_drive(
		coe_drive						:= Slot31_drv,
		CONVERSION_this					:= axis);
	
	axis_set_max_dynamic(
		reference_velocity				:=	csp_main_accuChange.CONSTANTS.MAX_VELOCITY_MMpSEC,
		velocity						:=	csp_main_accuChange.CONSTANTS.MAX_VELOCITY_MMpSEC,
		acceleration					:=	csp_main_accuChange.CONSTANTS.MAX_ACCELERATION_MMpSEC2,
		deceleration					:=	csp_main_accuChange.CONSTANTS.MAX_DECELERATION_MMpSEC2,
		jerk							:=	csp_main_accuChange.CONSTANTS.MAX_JERK_MMpSEC3,
		following_error					:=	csp_main_accuChange.CONSTANTS.MAX_FOLLOWING_ERROR_MM,
		CONVERSION_this					:=	axis);
	
	jog_manager_add_axis(
		list_index						:= SMTR61230_CASE_FEED_MAGAZINE_OS_DEPTH,
		axis							:= axis,
		master_axis						:= FALSE,
		jog_type						:= JOG_TYPE_LINEAR,
		sw_limit_positive				:= 30,
		sw_limit_negative				:= 0,
		CONVERSION_this					:= csp_main_jogManager.jog_manager_accuchange);
		
	(*process_message_init(
		object_name:= CONCAT(prc_path, '_not_in_position'), 
		behaviour:= MESSAGE_BEHAVIOUR_STATE, 
		reset_timeout:= 0, 
		disableable:= TRUE, 
		individual_reset:= FALSE, 
		machine_reaction:= MACHINE_REACTION_STOP_IN_PHASE_ONE, 
		typology:= MESSAGE_TYPOLOGY_ABNORMAL, 
		process:= prc, 
		CONVERSION_this:= not_in_position);*)
END_IF

IF objects_running()
THEN
	process_cycle(prc);
	axis_cycle(axis);
	coe_drive_cycle(Slot31_drv);
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_read_process_image" Id="{49842ab6-adef-4cc4-b95c-664823f2ee9e}">
      <Implementation>
        <ST><![CDATA[axis_restore_absolute_position_fb(
	io_retain_data				:= axis_restore_absolute_position_data, 
	io_axis						:= axis);]]></ST>
      </Implementation>
    </Action>
    <Action Name="_read_var_input" Id="{cabde050-3e8b-425c-b561-b393a954933f}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_set_runtime_properties" Id="{0d45d2dc-c3e9-4f07-87b7-9fb46ecd97d3}">
      <Implementation>
        <ST><![CDATA[
axis_status := axis_get_status(axis);
actual_position_mm := axis_get_actual_incremental_position(axis); (* axis_get_actual_modulo_position(axis); only with modulo*)

IF ABS(position_req_mm - actual_position_mm)< position_req_tolerance_mm
	OR
	process_get_mode(prc)= MODE_ABSENT
	OR
	process_get_mode(csp_main_accuChange.prc) = MODE_ABSENT
THEN
	in_position := TRUE;
ELSE
	in_position := FALSE;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_write_output" Id="{e61d9a6f-71a3-42ab-ba84-0774b2a0157b}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>