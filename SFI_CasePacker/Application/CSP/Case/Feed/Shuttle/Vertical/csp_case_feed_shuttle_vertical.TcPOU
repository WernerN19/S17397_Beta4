<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="csp_case_feed_shuttle_vertical" Id="{ddee5e33-b01a-4077-b573-496752b24f46}" SpecialFunc="None">
    <Declaration><![CDATA[(*********************************** G.D S.p.A. - Technical Department ***********************************
============= PROGRAM INFO ============
FOLDER:             TBD
MACHINES INVOLVED:  TBD 

============= DESCRIPTION =============
csp machine declaration

============= REVISIONS ===============
Date		Version	 	Author      	Description             
----------	-------		------------  	--------------------------------------------
2019/04/05 	0000.00	 	M.Grasso		Creation of the PRG

**********************************************************************************************************)
(*$R process_ref := prc; $*)
PROGRAM csp_case_feed_shuttle_vertical
VAR
	
	prc:											process;
	prc_path:										STRING;
	
	axis:											axis;
	servo_on_condition:								BOOL; (*SIMULATION ONLY*)
	axis_actual_position:							LREAL;
	torque_limit:									INT := 2000;    (*$P $*)
	torque_limit_old:								INT;
	
	in_accu_safe_pos:                               BOOL := FALSE;
    accu_tolerance:                                 LREAL := 5;
    accu_safe_pos:                                  LREAL := 180;

		enable_delay: TON;
		
	fsm_enable_condition:							BOOL := FALSE;
	fsm_next_status:								csp_case_feed_status_enum;
	fsm_status:										csp_case_feed_status_enum;
	debug_state_machine:							BOOL := FALSE;
	debug_state_machine_one_step:					BOOL := FALSE;	
	
	Torque_force_constant: 							LREAL := 0.6;
END_VAR

VAR CONSTANT
	MOTOR_PHASE_VELOCITY_DEGPS:						LREAL := 10;	
	MOTOR_MAX_VELOCITY_DEGPS:						LREAL := 4800;
	MOTOR_MAX_ACCELLERATION_DEGPS2:					LREAL := 2400;
	MOTOR_MAX_DECELLERATION_DEGPS2:					LREAL := 2400;
	MOTOR_MAX_JERK_DEGPS3:							LREAL := 100000000; 
	MOTOR_MAX_FOLLOWING_ERROR_DEG:					LREAL := 6;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[_read_var_input();

_object_manager();

IF 	NOT objects_running()
THEN
	RETURN;	
END_IF

_read_process_image();

_mode_manager();

CASE process_get_mode(prc) OF
	MODE_ABSENT:
		IF axis_get_mode(axis) = MODE_TEST
		THEN
			safety_integrated_series_close(csp_case_main_safety_drives_SD8000.chB_smes_sis);
		END_IF
		RETURN;
	MODE_INACTIVE:
		RETURN;
	MODE_TEST:
		_handle_process_test();
END_CASE

_set_runtime_properties();

(********************************* BODY *********************************)
axis.actual_torque := (axis.actual_current * Torque_force_constant)/1000;

IF ABS(axis.actual_position - accu_safe_pos)  < accu_tolerance
	OR (360 - axis.actual_position) < accu_tolerance
THEN
	in_accu_safe_pos := TRUE;
ELSE
	in_accu_safe_pos := FALSE;   
END_IF

// Sets the torque limit for the case shuttle horizontal
IF 	torque_limit <> torque_limit_old
THEN
	 IF soe_drive_channel_write_parameter(
		channel:=csp_case_feed_shuttle_vertical.axis.soe_drive_channel, 
		idn:= S_0_IDN + 92, 
		data_element:=soe_drive_element_value , 
		data_source:= ADR(torque_limit), 
		data_lenght:= SIZEOF(torque_limit), 
		CONVERSION_this:= csp_case_feed_shuttle_vertical.axis.soe_drive^)= SOE_DRIVE_RETURN_VALUE_DONE 
	THEN
		torque_limit_old := Torque_limit;
	END_IF
END_IF

// Manage the accu change safe position
fsm_enable_condition := axis_is_ok(FALSE, axis)	
						AND							
						servo_on_condition
						AND
						csp_main_accuChange.Brand_Change_Occurred;
										
			
IF	NOT fsm_enable_condition
	AND
	fsm_status <> CSP_CASE_FEED_STATUS_DISABLED
	AND
	fsm_status < CSP_CASE_FEED_STATUS_STOP_REQUEST
THEN
	fsm_status	:=	CSP_CASE_FEED_STATUS_DISABLE_REQUEST;
END_IF
					
CASE fsm_status OF
	
	CSP_CASE_FEED_STATUS_NOT_INITIALIZED:
	
        IF	axis_is_ok(return_when_absent := TRUE, CONVERSION_this := axis)
        THEN
            fsm_next_status := CSP_CASE_FEED_STATUS_DISABLED;
        END_IF

		
	CSP_CASE_FEED_STATUS_DISABLED:
		IF	fsm_enable_condition
			AND
			motorization_conditioner_is_execute(csp_main_services_towerLamp.buzzer_motcond) 							
		THEN	
			IF	in_accu_safe_pos
			THEN
				fsm_next_status := CSP_CASE_FEED_STATUS_CHANGE_OVER_MODE_DONE;
			ELSE								
				fsm_next_status := CSP_CASE_FEED_STATUS_ENABLE_REQUEST;
			END_IF
		END_IF;
		

	CSP_CASE_FEED_STATUS_ENABLE_REQUEST:
	
		axis_enable(axis);
		IF 	axis_is_standstill(axis)
		THEN
			fsm_next_status	:=	CSP_CASE_FEED_STATUS_ENABLED;
		END_IF;	
		
		
	CSP_CASE_FEED_STATUS_ENABLED:	
	
		axis_move_absolute(
			position 		:= accu_safe_pos,
			velocity 		:= MOTOR_PHASE_VELOCITY_DEGPS * 5,
			direction		:= AXIS_SHORTEST_WAY,
			acceleration 	:= MOTOR_MAX_ACCELLERATION_DEGPS2,
			deceleration 	:= MOTOR_MAX_DECELLERATION_DEGPS2,
			jerk 			:= MOTOR_MAX_JERK_DEGPS3, 
			buffer_mode 	:= AXIS_BUFFER_MODE_ABORTING,
			CONVERSION_this := axis);
			
		IF 	axis_is_absolute_moving(axis)
		THEN
			fsm_next_status	:= CSP_CASE_FEED_STATUS_CHANGE_OVER_MODE;
		END_IF
		
		
	CSP_CASE_FEED_STATUS_CHANGE_OVER_MODE:
	
		IF 	axis_is_standstill(axis)
		THEN	
			axis_disable(axis);					
			fsm_next_status := CSP_CASE_FEED_STATUS_CHANGE_OVER_MODE_DONE;
		END_IF
		
		
	CSP_CASE_FEED_STATUS_CHANGE_OVER_MODE_DONE:
	
		;
		
		
	CSP_CASE_FEED_STATUS_STOP_REQUEST:
	
		axis_stop(
		    deceleration 		:= MOTOR_MAX_DECELLERATION_DEGPS2,
		    jerk 				:= MOTOR_MAX_JERK_DEGPS3,
		    CONVERSION_this 	:= axis);

		IF 	axis_is_standstill(axis)
			OR
			NOT axis_is_ok(FALSE, axis)
			OR
			axis_is_disabled(axis)
		THEN
			fsm_next_status := CSP_CASE_FEED_STATUS_DISABLE_REQUEST;
		END_IF
		
		
	CSP_CASE_FEED_STATUS_DISABLE_REQUEST:
	
   		axis_disable(axis);
   		fsm_next_status := CSP_CASE_FEED_STATUS_DISABLING;

		
	CSP_CASE_FEED_STATUS_DISABLING:
	
        IF	axis_is_disabled(axis)
        THEN
            fsm_next_status := CSP_CASE_FEED_STATUS_DISABLED;
        END_IF;
		
END_CASE

IF 	NOT debug_state_machine
	OR
	debug_state_machine_one_step
THEN
	fsm_status := fsm_next_status;
	debug_state_machine_one_step := FALSE;
END_IF

(************************************************************************)

_handle_messages();

_write_output();]]></ST>
    </Implementation>
    <Action Name="_handle_messages" Id="{c644064d-2e78-4c94-a840-a576337b7ca7}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_handle_process_test" Id="{3444f244-06f0-4b67-8611-b8101ce584e6}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_mode_manager" Id="{40c505a6-bda7-4a31-aae4-8e8be41e7481}">
      <Implementation>
        <ST><![CDATA[IF process_mode_req_is_pending(prc)
THEN
    process_apply_mode_req_first_step(prc);
    CASE process_get_mode(prc) OF
        MODE_TO_ABSENT:
			;
        MODE_TO_INACTIVE:
			;
        MODE_TO_TEST:
			;
        MODE_TO_OPERATIONAL:
			;
    END_CASE
    process_apply_mode_req_second_step(prc);
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_object_manager" Id="{c05cfa92-c078-423a-a070-74fa70cfe578}">
      <Implementation>
        <ST><![CDATA[IF objects_initialization()
THEN
	sub_process_init(
		object_name									:= 'csp_case_feed_shuttle_vertical.prc', 
		process										:= csp_case_feed_shuttle.prc, 
		CONVERSION_this								:= prc);
		
	prc_path 										:= process_get_path(prc);
	
(* axis smes *)
	IF csp_main_configurator.Physical_hw
	THEN	
		axis_init(
			object_name								:= CONCAT(prc_path, '_axis'), 
			axis_type								:= AXIS_TYPE_SERVO, 
			encoder_scaling_factor					:= G_SERVO_ENCODER_SCALING_FACTOR_DEGPINC,
			modulo									:= G_MODULO_360_DEG, 
			process									:= prc, 
			CONVERSION_this							:= axis);
			
		axis_add_safety_integrated_series(
			safety_integrated_series 				:= csp_case_main_safety_drives_SD8000.chB_smes_sis,
			CONVERSION_this							:= axis);
			
		axis_init_absolute_encoder_preset(
			position                                := 0.0,
			CONVERSION_this                         := axis);	
			
			
	ELSE
		axis_init(
			object_name								:= CONCAT(prc_path, '_axis'), 
			axis_type								:= AXIS_TYPE_VIRTUAL, 
			encoder_scaling_factor					:= G_VIRTUAL_ENCODER_SCALING_FACTOR_DEGPINC,
			modulo									:= G_MODULO_360_DEG, 
			process									:= prc, 
			CONVERSION_this							:= axis);		
				
	END_IF
	
	axis_set_max_dynamic(
		reference_velocity							:=	MOTOR_MAX_VELOCITY_DEGPS,
		velocity									:=	MOTOR_MAX_VELOCITY_DEGPS,
		acceleration								:=	MOTOR_MAX_ACCELLERATION_DEGPS2,
		deceleration								:=	MOTOR_MAX_DECELLERATION_DEGPS2,
		jerk										:=	MOTOR_MAX_JERK_DEGPS3,
		following_error								:=	MOTOR_MAX_FOLLOWING_ERROR_DEG,
		CONVERSION_this								:=	axis);
		
	
	jog_manager_add_axis(
		list_index									:= SMTR8023_CASE_FEED_SHUTTLE_VERTICAL,
		axis										:= axis,
		master_axis									:= FALSE,
		jog_type									:= JOG_TYPE_LINEAR,
		sw_limit_positive							:= 800,
		sw_limit_negative							:= 0,
		CONVERSION_this								:= csp_main_jogManager.jog_manager_real);

	axis_add_soe_drive(
		channel										:=	SOE_DRIVE_CHANNEL_B,
		soe_drive									:=	csp_case_main_drives.SD8000_drv,
		CONVERSION_this								:=	axis);

	
END_IF

IF objects_running()
THEN
	process_cycle(prc);
	axis_cycle(axis);
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_read_process_image" Id="{629dc6eb-82e0-445a-97d0-e39b61fe3e51}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_read_var_input" Id="{05ae8405-12bc-4f41-a58b-51d0240c3d21}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_set_runtime_properties" Id="{ddf7aced-16b7-42cf-9f0f-3e3e257ac382}">
      <Implementation>
        <ST><![CDATA[axis_actual_position := axis_get_actual_modulo_position(axis);
enable_delay(IN:=axis_is_ready_to_enable(axis) , PT:=T#2S , Q=> servo_on_condition , ET=> );]]></ST>
      </Implementation>
    </Action>
    <Action Name="_write_output" Id="{f102c493-8c85-47a6-868f-e9a43d0c1ae6}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>