<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="csp_case_virtualMaster" Id="{c40c207b-231e-4a43-94d4-95880b7bd543}" SpecialFunc="None">
    <Declaration><![CDATA[(*********************************** G.D S.p.A. - Technical Department ***********************************
============= PROGRAM INFO ============
FOLDER:             TBD
MACHINES INVOLVED:  TBD 

============= DESCRIPTION =============
csp machine declaration

============= REVISIONS ===============
Date		Version	 	Author      	Description             
----------	-------		------------  	--------------------------------------------
2019/04/05 	0000.00	 	M.Grasso		Creation of the PRG

**********************************************************************************************************)
(*$R process_ref := prc; $*)
PROGRAM csp_case_virtualMaster
VAR
	
	prc:												process;
	prc_path:											STRING;
	
	fsm_enable_condition:								BOOL := FALSE;
	fsm_next_status:									csp_case_status_enum;
	fsm_status:											csp_case_status_enum;
	
	axis: 												axis;
	phase_position_deg:									LREAL := 0;
	phase_velocity_mmps:								LREAL := 50;
	slave_position_has_been_calculated:					BOOL  := FALSE;
	engage_enable:										BOOL  := TRUE;
	disable_req:										BOOL  := FALSE;
	debug_state_machine:								BOOL  :=FALSE;
	debug_state_machine_one_step:						BOOL  :=FALSE;
	reject_ok:											BOOL  := FALSE;
	reject_busy:										BOOL  := FALSE;
	ready_for_cam:										BOOL  := FALSE;
	cam_engaged:										BOOL  := FALSE;
	phase_enable:										BOOL  := TRUE;
	slave_scaling:										LREAL := 1; 
	master_scaling:										LREAL := 1;
 	load_check_ph_jog:									phase;
	master_offset_phase:								LREAL;
	
	cam_id: 											DINT := LINEAR_CAM;
	axis_calculate_cam_slave_master_position_deg: 		LREAL := 0;
	home_position_master_offset_deg: 					LREAL := 0;
	axis_calculated_cam_slave_position_deg: 			LREAL := 0;
	phase_velocity_degps:								LREAL := 20.0;

	
	Axis_faulted: 										Boolean;
	Axis_faulted_active_dchk: 							digital_check;
	engage_after_estop: 								BOOL := FALSE;
	not_used_11:										BOOL;
	
	
	(* PHASE AND CONNECTION TEST *)
	connection_status: 									csp_case_connection_status_enum;
	connection_status_next: 							csp_case_connection_status_enum;
	connection_done: 									BOOL;
	connection_running: 								BOOL;
	connection_error:									BOOL;
	connection_time_out_tmr:							timer;
	connection_faulted_aem:	 							message;
	connection_conditions:								BOOL;
	connection_done_motcond:							motorization_conditioner;
	connection_motorization_moving:						BOOL;
	
	next_activation_position:							LREAL;	
	activation_position:								LREAL := 0.0;
	
	
	phase_status: 										csp_case_phase_status_enum;
	phase_status_next: 									csp_case_phase_status_enum;
	phase_done: 										BOOL;
	phase_running: 										BOOL;
	phase_error:										BOOL;
	phase_time_out_tmr:									timer;
	phase_faulted_aem:	 								message;
	phase_conditions:									BOOL;
	phase_slave_position:								LREAL;
	
	debug_phase_machine_one_step:						BOOL := FALSE;
	debug_connection_machine_one_step:					BOOL := FALSE;
	debug_immediate_stop_aem:							message;
	debug_immediate_stop:								BOOL;
	
	active_cam:											DINT := DWELL_CAM;
	next_cam:											DINT := DWELL_CAM;
	
	dwell:												BOOL;
	run:												BOOL;
	
	run_test:											BOOL := FALSE;
	
	empty_cycle_count:									INT := 0;
	empty_cycle_runout_input:							INT := 4;
	runout_complete:									message;
	
	run_check_ph: 										phase;
	run_check_ph_deg:									LREAL := 353; (*$P $*)
	
	feed_vm_engaged: 									BOOL;
	transport_vm_engaged: 								BOOL;
	condition1: 										BOOL := FALSE;
	condition2: 										BOOL := FALSE;
	condition3: 										BOOL := False;
	AMR: BOOL;
	engage_count: INT;
END_VAR

VAR CONSTANT
	MOTOR_MAX_VELOCITY_DEGPS:							LREAL := 9600;
	MOTOR_MAX_ACCELLERATION_DEGPS2:						LREAL := 4800;
	MOTOR_MAX_DECELLERATION_DEGPS2:						LREAL := 4800;
	MOTOR_MAX_JERK_DEGPS3:								LREAL := 100000000; 
	MOTOR_MAX_FOLLOWING_ERROR_DEG:						LREAL := 2;
	

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[_read_var_input();

_object_manager();

IF NOT objects_running()
THEN
	RETURN;	
END_IF

_read_process_image();

_mode_manager();

CASE process_get_mode(prc) OF
	MODE_ABSENT:
		next_cam := DWELL_CAM;
	MODE_INACTIVE:
		RETURN;
	MODE_TEST:
		_handle_process_test();
END_CASE

_set_runtime_properties();

(********************************* BODY *********************************)
(************************************************************************)
IF 	axis_is_moving(csp_main_motorization_virtualManager.axis)
	AND NOT axis_is_ok(FALSE, csp_case_transport_os_trailing.axis)
	AND NOT axis_is_ok(FALSE,csp_case_transport_os_leading.axis)
	AND NOT axis_is_ok(FALSE,csp_case_transport_ls_trailing.axis)
	AND NOT axis_is_ok(FALSE,csp_case_transport_ls_leading.axis)
	AND NOT axis_is_ok(FALSE,csp_case_tr_squaring_ls_leading.axis)
	AND NOT axis_is_ok(FALSE,csp_case_tr_squaring_ls_trailing.axis)
	AND NOT axis_is_ok(FALSE,csp_case_tr_squaring_os_leading.axis)
	AND NOT axis_is_ok(FALSE,csp_case_tr_squaring_os_trailing.axis)
	AND NOT axis_is_ok(FALSE,csp_case_closing_os_horizontal.axis)
	AND NOT axis_is_ok(FALSE,csp_case_closing_os_upper.axis)
	AND NOT axis_is_ok(FALSE,csp_case_closing_os_lower.axis)
	AND NOT axis_is_ok(FALSE,csp_case_closing_ls_horizontal.axis)
	AND NOT axis_is_ok(FALSE,csp_case_closing_ls_upper.axis)
	AND NOT axis_is_ok(FALSE,csp_case_closing_ls_lower.axis)
	AND NOT axis_is_ok(FALSE,csp_case_fc_ls_lower_follower.axis)
	AND NOT axis_is_ok(FALSE,csp_case_fc_ls_lower_spreader.axis)
	AND NOT axis_is_ok(FALSE,csp_case_fc_ls_lower_trailingCloser.axis)
	AND NOT axis_is_ok(FALSE,csp_case_fc_ls_upper_follower.axis)
	AND NOT axis_is_ok(FALSE,csp_case_fc_ls_upper_leadingMinorCloser.axis)
	AND NOT axis_is_ok(FALSE,csp_case_fc_ls_upper_spreader.axis)
	AND NOT axis_is_ok(FALSE,csp_case_fc_os_lower_follower.axis)
	AND NOT axis_is_ok(FALSE,csp_case_fc_os_lower_spreader.axis)
	AND NOT axis_is_ok(FALSE,csp_case_fc_os_upper_follower.axis)
	AND NOT axis_is_ok(FALSE,csp_case_fc_os_upper_spreader.axis)
	AND NOT axis_is_ok(FALSE,csp_case_feed_arm_elbow.axis)
	AND NOT axis_is_ok(FALSE,csp_case_feed_arm_shoulder.axis)
	AND NOT axis_is_ok(FALSE,csp_case_feed_arm_wrist.axis)
	AND NOT axis_is_ok(FALSE,csp_case_feed_shuttle_horizontal.axis)
	AND NOT axis_is_ok(FALSE,csp_case_feed_shuttle_vertical.axis)
	AND NOT axis_is_ok(FALSE,csp_case_loader_guide_downstream.axis)
	//AND not axis_is_ok(FALSE,csp_case_loader_guide_length.axis)
	AND NOT axis_is_ok(FALSE,csp_case_loader_guide_upstream.axis)
	AND NOT axis_is_ok(FALSE,csp_case_loader_pusher.axis)
	//AND not axis_is_ok(FALSE,csp_transfer_infeed_reject_pusher.axis)
	//AND not axis_is_ok(FALSE,csp_transfer_upstacker_downstream.axis)
	//AND not axis_is_ok(FALSE,csp_transfer_upstacker_upstream.axis)
	//AND not axis_is_ok(FALSE,csp_transfer_crosspusher_horizontal.axis)
	//AND not axis_is_ok(FALSE,csp_transfer_crosspusher_vertical.axis)
THEN
    boolean_set(Axis_faulted);
END_IF
  
IF 	machine_is_stop_emergency_active(csp.mch)
	AND motorization_manager_is_stopped(csp_main_motorization_manager.motm)
THEN
	boolean_reset(Axis_faulted);
END_IF

 
 (* USED TO COUNT HOW MANY CYCLES OCCUR BEFORE STOPPING MACHINE *)
IF 	csp_main_motorization.empty_command
	AND csp_transfer_upstacker_sensors.dwell_transfer_empty
	AND phase_edge(csp_case_loader_virtualMaster.load_check_ph)
THEN
	empty_cycle_count := empty_cycle_count + 1;
END_IF

IF 	empty_cycle_count = empty_cycle_runout_input
THEN
	process_message_set(1, 1, 1, runout_complete);
END_IF

IF 	process_message_is_on(runout_complete)
	OR NOT csp_main_motorization.empty_command
THEN
	process_message_reset(runout_complete);
	empty_cycle_count := 0;
END_IF
 
 
(*FSM Control*)
(*disable_req := NOT machine_is_running(csp.mch)
                AND machine_is_stop_emergency_active(csp.mch)
                AND csp_main_motorization_virtualManager.axis.actual_velocity = 0;*)	//_read_var_input
				
IF	machine_is_stop_emergency_active(csp.mch) AND axis_is_cam_engaged(axis) 
THEN
	engage_after_estop := TRUE;
ELSIF NOT machine_is_stop_emergency_active(csp.mch) AND fsm_status = CSP_CASE_STATUS_CAM_ENGAGED 
THEN
	engage_after_estop := FALSE;
END_IF


(* CHECKS TO DETERMINE IF WE CAN INDEX *)
phase_set_data(
	phase				:= run_check_ph_deg,
	delay				:= 0,			
	max_compensation	:= 0,			
	CONVERSION_this		:= run_check_ph);
	
phase_set_data(
	phase				:= csp_case_loader_virtualmaster.load_check_deg,
	delay				:= 0,			
	max_compensation	:= 0,			
	CONVERSION_this		:= load_check_ph_jog);

IF 	axis_is_cam_engaged(csp_case_feed_virtualMaster.axis)
THEN
	feed_vm_engaged :=TRUE;
ELSE
	feed_vm_engaged :=FALSE; 
END_IF
IF 	axis_is_cam_engaged(csp_case_transport_virtualMaster.axis)
THEN
	transport_vm_engaged :=TRUE;
ELSE
	transport_vm_engaged :=FALSE; 
END_IF

(* DECIDES WHETHER TO START OR STOP THE CASE VIRTUAL *)
IF phase_edge(run_check_ph)
THEN
		
	IF 
	( (* USED FOR PRIMING THE CASE SIDE WITH A CASE SO IT IS READY TO LOAD IMMEDIATELY FROM TRANSFER *)
		(
			NOT csp_case_loader.cases_primed 
			AND 
				(
					NOT csp_case_loader.case_at_loader
					OR
					(
						csp_case_loader.case_at_loader
						AND csp_transfer_upstacker.stack_in_case_at_loader
					)
						
				)
		)
		AND NOT csp_case_transport_virtualMaster.stop_for_reject
		AND axis_is_cam_engaged(csp_case_feed_virtualMaster.axis)
		AND NOT message_is_on(csp_case_discharge_reject_sensors.downstream_backup_di_dchk.alarm_asm.message)
		AND NOT message_is_on(csp_main_interface.Cartoner_Stop_Request_aem)
		AND NOT motorization_manager_is_held(csp_main_motorization_manager.motm)//message_is_on(csp_main_interface.Cartoner_Stop_Request_aem)
		//AND NOT csp_case_feed_magazine.suspend_request_aml_zone	
	)
	OR 
	( (* STACK IS READY AND WAITING ON TRANSFER TO RUN (CASE & LOAD AT LOAD SR STEP AND CASE AT FEED SR STEP)*)
		csp_case_loader.case_at_loader
		AND csp_transfer_upstacker.stack_in_case_at_loader
		AND csp_case_loader.cases_primed 
		AND csp_case_fc_ls_upper_leadingMinorCloser.at_upstream_pos
		AND NOT csp_case_transport_virtualMaster.stop_for_reject
		AND axis_is_cam_engaged(csp_case_feed_virtualMaster.axis)
		AND axis_is_cam_engaged(csp_case_transport_virtualMaster.axis)
		AND NOT message_is_on(csp_case_discharge_reject_sensors.downstream_backup_di_dchk.alarm_asm.message)
		AND NOT message_is_on(csp_main_interface.Cartoner_Stop_Request_aem)
		AND NOT motorization_manager_is_held(csp_main_motorization_manager.motm)
		//AND NOT csp_case_feed_magazine.suspend_request_aml_zone	
	)
	OR 
	( (* STACK IS READY AND WAITING ON TRANSFER TO RUN (NO CASE & LOAD AT LOAD SR STEP AND CASE AT FEED SR STEP) *)
		NOT csp_case_loader.case_at_loader
		AND NOT csp_transfer_upstacker.stack_in_case_at_loader
		AND csp_case_loader.cases_primed 
		//AND NOT csp_case_fc_ls_upper_leadingMinorCloser.at_upstream_pos  //removed because no case at loader
		AND NOT csp_case_transport_virtualMaster.stop_for_reject
		AND axis_is_cam_engaged(csp_case_feed_virtualMaster.axis)
		AND axis_is_cam_engaged(csp_case_transport_virtualMaster.axis)
		AND NOT message_is_on(csp_case_discharge_reject_sensors.downstream_backup_di_dchk.alarm_asm.message)
		AND NOT message_is_on(csp_main_interface.Cartoner_Stop_Request_aem)
		AND NOT motorization_manager_is_held(csp_main_motorization_manager.motm)//message_is_on(csp_main_interface.Cartoner_Stop_Request_aem)
		//AND NOT csp_case_feed_magazine.suspend_request_aml_zone	
		)
	OR
	(
		csp_main_motorization.empty_command
		AND csp_transfer_upstacker_sensors.dwell_transfer_empty
		AND empty_cycle_count <= empty_cycle_runout_input
	)
	THEN
		dwell := FALSE;
		run := TRUE;
	ELSE
		run := FALSE;
		dwell := TRUE;
	END_IF
		
END_IF


IF connection_done
THEN 
	motorization_conditioner_start_done(connection_done_motcond);
END_IF

(* RESETS AXES IF PHASE DONE AND CONNECTION DONE AND DISABLED *)
IF 	phase_done
	AND connection_done
	AND axis_is_disabled(axis)
THEN
	phase_done := FALSE;
	connection_done := FALSE;
END_IF

(* CLEARS PHASE AND CONNECTION ERRORS ON STOP *)
IF 	machine_is_stopped(csp.mch)
	OR machine_is_stop_emergency_active(csp.mch)
THEN
	phase_error := FALSE;
	connection_error := FALSE;	
END_IF

(* Overflow protection of engage count *)
IF	engage_count > 32000
THEN
	engage_count := 0;
END_IF

phase();

connection();

_handle_messages();

_write_output();]]></ST>
    </Implementation>
    <Action Name="_handle_messages" Id="{66dedee8-2143-4274-8008-083419736279}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_handle_process_test" Id="{52592776-5e62-48e8-9415-b1872c4283a8}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_mode_manager" Id="{d1662a84-f980-46c6-823d-b4eadfa7ca1e}">
      <Implementation>
        <ST><![CDATA[IF process_mode_req_is_pending(prc)
THEN
    process_apply_mode_req_first_step(prc);
    CASE process_get_mode(prc) OF
        MODE_TO_ABSENT:
			;
        MODE_TO_INACTIVE:
			;
        MODE_TO_TEST:
			;
        MODE_TO_OPERATIONAL:
			;
    END_CASE
    process_apply_mode_req_second_step(prc);
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_object_manager" Id="{25b53cca-9f99-47fa-bfb3-3a2b47a92be7}">
      <Implementation>
        <ST><![CDATA[IF objects_initialization()
THEN
	sub_process_init(
		object_name					:= 'csp_case_virtualMaster.prc', 
		process						:= csp_case.prc, 
		CONVERSION_this				:= prc);
		
	prc_path 						:= process_get_path(prc);
	
	boolean_init(
        object_name:= CONCAT(prc_path, 'Axis_faulted'),
        process:= prc,
        CONVERSION_this:= Axis_faulted);
		
	axis_init(
		object_name								:= CONCAT(prc_path, '_axis'), 
		axis_type								:= AXIS_TYPE_VIRTUAL, 
		encoder_scaling_factor					:= G_VIRTUAL_ENCODER_SCALING_FACTOR_DEGPINC,
		modulo									:= G_MODULO_360_DEG, 
		process									:= prc, 
		CONVERSION_this							:= axis);
	
	axis_set_max_dynamic(
		reference_velocity						:=	MOTOR_MAX_VELOCITY_DEGPS,
		velocity								:=	MOTOR_MAX_VELOCITY_DEGPS,
		acceleration							:=	MOTOR_MAX_ACCELLERATION_DEGPS2,
		deceleration							:=	MOTOR_MAX_DECELLERATION_DEGPS2,
		jerk									:=	MOTOR_MAX_JERK_DEGPS3,
		following_error							:=	MOTOR_MAX_FOLLOWING_ERROR_DEG,
		CONVERSION_this							:=	axis);
	
	jog_manager_add_axis(
		list_index					:= JOG_LIST_CSP_CASE_VIRTUAL,
		axis						:= axis,
		master_axis					:= TRUE,
		jog_type					:= JOG_TYPE_ROTATIVE_PLUS,
		sw_limit_positive			:= 0.0,
		sw_limit_negative			:= 0.0,
		CONVERSION_this				:= csp_main_jogManager.jog_manager_virtual);

	
    digital_check_and_message_init(
        object_name:= CONCAT(prc_path, 'Axis_faulted_active_dchk'),
        alarm_if_input_off:= FALSE,
        alarm_delay:= 0,
        enabled_at_powerup:= TRUE,
        individual_reset:= FALSE,
        machine_reaction:=  MACHINE_REACTION_EMERGENCY_STOP,//MACHINE_REACTION_EMERGENCY_STOP,
        typology:=  MESSAGE_TYPOLOGY_ABNORMAL,//MESSAGE_TYPOLOGY_OBLIGATION,
        process:= prc,
        CONVERSION_this:= Axis_faulted_active_dchk);
       
       
    digital_check_add_boolean(
        boolean:= Axis_faulted,
        CONVERSION_this:= Axis_faulted_active_dchk);

		
	process_message_init(
		object_name					:=	CONCAT(prc_path, '_runout_complete'), 
		behaviour					:=	MESSAGE_BEHAVIOUR_EVENT,
		reset_timeout				:=	0,
		disableable					:=	TRUE,
		individual_reset			:=	FALSE,
		machine_reaction			:=	MACHINE_REACTION_STOP_IN_PHASE_ONE,
		typology					:=	MESSAGE_TYPOLOGY_ABNORMAL,
		process						:=	prc,
		CONVERSION_this				:=	runout_complete);
		
		
	process_message_init(
		object_name					:=	CONCAT(prc_path, '_phase_faulted_aem'), 
		behaviour					:=	MESSAGE_BEHAVIOUR_EVENT,
		reset_timeout				:=	0,
		disableable					:=	TRUE,
		individual_reset			:=	FALSE,
		machine_reaction			:=	MACHINE_REACTION_NORMAL_STOP,
		typology					:=	MESSAGE_TYPOLOGY_ABNORMAL,
		process						:=	prc,
		CONVERSION_this				:=	phase_faulted_aem);
	
	timer_init(
		object_name					:= CONCAT(prc_path, 'phase_time_out_tmr'),
		process						:= prc,
		CONVERSION_this				:= phase_time_out_tmr);
		
	process_message_init(
		object_name					:=	CONCAT(prc_path, 'debug_immediate_stop_aem'), 
		behaviour					:=	MESSAGE_BEHAVIOUR_STATE,
		reset_timeout				:=	0,
		disableable					:=	TRUE,
		individual_reset			:=	FALSE,
		machine_reaction			:=	MACHINE_REACTION_NORMAL_STOP,
		typology					:=	MESSAGE_TYPOLOGY_ABNORMAL,
		process						:=	prc,
		CONVERSION_this				:=	debug_immediate_stop_aem);
		
	timer_init(
		object_name					:= CONCAT(prc_path, 'connection_time_out_tmr'),
		process						:= prc,
		CONVERSION_this				:= connection_time_out_tmr);
		
		
	process_message_init(
		object_name					:=	CONCAT(prc_path, '_connection_faulted_aem'), 
		behaviour					:=	MESSAGE_BEHAVIOUR_EVENT,
		reset_timeout				:=	0,
		disableable					:=	TRUE,
		individual_reset			:=	FALSE,
		machine_reaction			:=	MACHINE_REACTION_NORMAL_STOP,
		typology					:=	MESSAGE_TYPOLOGY_ABNORMAL,
		process						:=	prc,
		CONVERSION_this				:=	connection_faulted_aem);
		
	motorization_conditioner_init(
		object_name					:=	CONCAT(prc_path, 'connection_done_motcond'),
		velocity_limit				:=	0.0,
		velocity_limit_active		:=	FALSE,
		idle_handshake_active		:=	FALSE,
		execute_handshake_active	:=	TRUE,
		hold_handshake_active		:=	FALSE,
		suspend_handshake_active	:=	FALSE,
		complete_handshake_active	:=	FALSE,
		abort_handshake_active		:=	FALSE,
		stop_handshake_active		:=	FALSE,
		origin						:=	MOTORIZATION_CONDITIONER_ORIGIN_INTERNAL,
		manager						:=	csp_main_motorization_manager.motm,
		process						:=	prc,
		CONVERSION_this				:=	connection_done_motcond);
   
		
	phase_init(
        object_name 				:= CONCAT(prc_path, '_run_check_ph'),
        phase 						:= 0,	//Set at runtime!
        delay 						:= 0,
        max_compensation 			:= 0,
        generator 					:= csp_main_motorization_virtualManager.phgen,
        process 					:= prc,
        CONVERSION_this 			:= run_check_ph);	
		
	phase_init(
        object_name 				:= CONCAT(prc_path, '_load_check_ph_jog'),
        phase 						:= 0,	//Set at runtime!
        delay 						:= 0,
        max_compensation 			:= 0,
        generator 					:= csp_main_motorization_virtualManager.phgen,
        process 					:= prc,
        CONVERSION_this 			:= load_check_ph_jog);	
		

END_IF

IF objects_running()
THEN
	process_cycle(prc);
	motorization_conditioner_cycle(connection_done_motcond);
	
	phase_cycle(run_check_ph);
	phase_cycle(load_check_ph_jog);
	axis_cycle(axis);
	digital_check_cycle(Axis_faulted_active_dchk);
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_read_process_image" Id="{c98990cd-e917-4e9b-87fa-420366eb6ae9}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_read_var_input" Id="{6ea8e3a1-8f5f-4ad7-80e8-0de912c49b77}">
      <Implementation>
        <ST><![CDATA[disable_req := csp_case.disable_req;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_set_runtime_properties" Id="{ef671784-2394-4ec0-b4ca-6d30f21fc469}">
      <Implementation>
        <ST><![CDATA[(* Cam management *)
IF 	connection_done
THEN
	active_cam := axis.engaged_cam.cam_id;
END_IF

(******************** DEBUG *****************************)

IF 
( (* USED FOR PRIMING THE CASE SIDE WITH A CASE SO IT IS READY TO LOAD IMMEDIATELY FROM TRANSFER *)
	(
		NOT csp_case_loader.cases_primed 
		AND 
			(
				NOT csp_case_loader.case_at_loader
				OR
				(
					csp_case_loader.case_at_loader
					AND csp_transfer_upstacker.stack_in_case_at_loader
				)
					
			)
	)
	AND NOT csp_case_transport_virtualMaster.stop_for_reject
	AND axis_is_cam_engaged(csp_case_feed_virtualMaster.axis)
	AND NOT message_is_on(csp_case_discharge_reject_sensors.downstream_backup_di_dchk.alarm_asm.message)
	AND NOT message_is_on(csp_main_interface.Cartoner_Stop_Request_aem)
	AND NOT motorization_manager_is_held(csp_main_motorization_manager.motm)//message_is_on(csp_main_interface.Cartoner_Stop_Request_aem)
	//AND NOT csp_case_feed_magazine.suspend_request_aml_zone	
)
THEN
	condition1 := TRUE;
ELSE
	condition1 := FALSE;
END_IF

IF
( (* STACK IS READY AND WAITING ON TRANSFER TO RUN (CASE & LOAD AT LOAD SR STEP AND CASE AT FEED SR STEP)*)
	csp_case_loader.case_at_loader
	AND csp_transfer_upstacker.stack_in_case_at_loader
	AND csp_case_loader.cases_primed 
	AND csp_case_fc_ls_upper_leadingMinorCloser.at_upstream_pos
	AND NOT csp_case_transport_virtualMaster.stop_for_reject
	AND axis_is_cam_engaged(csp_case_feed_virtualMaster.axis)
	AND axis_is_cam_engaged(csp_case_transport_virtualMaster.axis)
	AND NOT message_is_on(csp_case_discharge_reject_sensors.downstream_backup_di_dchk.alarm_asm.message)
	AND NOT message_is_on(csp_main_interface.Cartoner_Stop_Request_aem)
	AND NOT motorization_manager_is_held(csp_main_motorization_manager.motm)
	//AND NOT csp_case_feed_magazine.suspend_request_aml_zone	
)
THEN
	condition2 := TRUE;
ELSE
	condition2 := FALSE;
END_IF

IF 
( (* STACK IS READY AND WAITING ON TRANSFER TO RUN (NO CASE & LOAD AT LOAD SR STEP AND CASE AT FEED SR STEP) *)
	NOT csp_case_loader.case_at_loader
	AND NOT csp_transfer_upstacker.stack_in_case_at_loader
	AND csp_case_loader.cases_primed 
	//AND NOT csp_case_fc_ls_upper_leadingMinorCloser.at_upstream_pos  //removed because no case at loader
	AND NOT csp_case_transport_virtualMaster.stop_for_reject
	AND axis_is_cam_engaged(csp_case_feed_virtualMaster.axis)
	AND axis_is_cam_engaged(csp_case_transport_virtualMaster.axis)
	AND NOT message_is_on(csp_case_discharge_reject_sensors.downstream_backup_di_dchk.alarm_asm.message)
	AND NOT message_is_on(csp_main_interface.Cartoner_Stop_Request_aem)
	AND NOT motorization_manager_is_held(csp_main_motorization_manager.motm)//message_is_on(csp_main_interface.Cartoner_Stop_Request_aem)
	//AND NOT csp_case_feed_magazine.suspend_request_aml_zone	
	)
THEN
	condition3 := TRUE;
ELSE
	condition3 := FALSE;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_write_output" Id="{dbfc5c1c-31ef-4a3c-b62c-5096eaa2cfbf}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="connection" Id="{28366c5a-1261-05c4-0676-23916dee9329}">
      <Implementation>
        <ST><![CDATA[connection_conditions :=	
	NOT process_message_is_on(connection_faulted_aem)
	//AND
	//NOT jog_manager_is_jog_axis_active(JOG_LIST_CSP_CASE_VIRTUAL, csp_main_jogManager.jog_manager_virtual)
	AND
	phase_done;

(* connection_done reset *)
IF	connection_done
	AND	
	NOT connection_conditions
	AND
	NOT csp.o_machine_is_running
THEN
	connection_done := FALSE;
END_IF

(* Exit conditions *)
IF	NOT connection_conditions 
	AND
	NOT motorization_manager_is_stopping(csp_main_motorization_manager.motm)	
THEN	
	connection_status_next := CSP_CASE_STATUS_CONNECTION_ERROR;
	connection_status := connection_status_next;	
END_IF

(*************** MACHINE STATUS ***************)
CASE connection_status OF

	CSP_CASE_STATUS_CONNECTION_START:	(* Start connection *)
		IF	(
				motorization_manager_is_starting(csp_main_motorization_manager.motm) //TODOPZ: da decidere a che livello usare le variabili di i e o: wn_feeding.i_motorization_is_starting?					
				//AND axis_is_cam_engaged(csp_case_feed_virtualMaster.axis)
				//AND axis_is_cam_engaged(csp_case_glue_virtualMaster.axis)
				AND 
					(
						axis_is_cam_engaged(csp_case_transport_virtualMaster.axis) 
						OR 
						csp_case_transport_virtualMaster.stop_for_reject
					)
				//AND axis_is_cam_engaged(csp_case_loader_virtualMaster.axis)
				//OR
				//jog_manager_is_jog_axis_active(JOG_LIST_CSP_CASE_VIRTUAL, csp_main_jogManager.jog_manager_virtual)
			)
			THEN
				connection_running := TRUE;
				connection_status_next := CSP_CASE_STATUS_CONNECTION_ENGAGE;
		END_IF
		
	CSP_CASE_STATUS_CONNECTION_ENGAGE:		
	
		master_offset_phase := csp_main_motorization_virtualManager.axis.actual_modulo_position;		
	
		axis_engage_cam(
			cam_id							:=	active_cam,	
			master_engage_mode				:=	AXIS_CAM_ENGAGE_RELATIVE,
			slave_engage_mode				:=	AXIS_CAM_ENGAGE_RELATIVE,
			activation_mode					:=	AXIS_CAM_ACTIVATION_IMMEDIATELY,
			activation_position				:=	0.0,
			master_scaling_mode				:=	AXIS_CAM_SCALING_MODE_USER_DEFINED,
			slave_scaling_mode				:=	AXIS_CAM_SCALING_MODE_AUTOOFFSET,
			master_offset					:=	LMOD(home_position_master_offset_deg + master_offset_phase, axis_get_modulo(csp_main_motorization_virtualManager.axis)),
			slave_offset					:=	0.0,
			master_scaling					:=	master_scaling,
			slave_scaling					:=	slave_scaling,
			interpolation_type				:=	AXIS_CAM_INTERPOLATION_SPLINE,	 
			master							:=	csp_main_motorization_virtualManager.axis,
			CONVERSION_this					:=	axis);
		
		connection_status_next:= CSP_CASE_STATUS_CONNECTION_ENGAGED;
	
	CSP_CASE_STATUS_CONNECTION_ENGAGED:
	
		IF active_cam = 0
		THEN
			active_cam := next_cam;
		END_IF
	
		IF 	axis_is_cam_engaged(axis) 
		THEN				
			IF	active_cam <> next_cam
			THEN							
				connection_status_next := CSP_CASE_STATUS_CONNECTION_CHANGE_CAM;
			ELSE
				connection_status_next:= CSP_CASE_STATUS_CONNECTION_DONE;
			END_IF
		END_IF
		
	CSP_CASE_STATUS_CONNECTION_CHECK_CHANGE_CAM:	
					
		IF 	dwell
		THEN
			next_cam := DWELL_CAM;
			dwell:= FALSE;	
		END_IF
				
		IF 	run
		THEN
			next_cam := FORWARD_CAM;
			run := FALSE;
		END_IF	
		
		IF	(active_cam <> next_cam)
			AND 
			connection_conditions
		THEN							
			connection_status_next := CSP_CASE_STATUS_CONNECTION_CHANGE_CAM;
		END_IF
			
		//IF	NOT connection_motorization_moving
		//THEN
			//connection_status_next := CSP_CASE_STATUS_CONNECTION_DONE;
		//END_IF
	
	CSP_CASE_STATUS_CONNECTION_CHANGE_CAM:	
		engage_count := engage_count + 1;

		axis_engage_cam(
			cam_id							:=	next_cam,	
			master_engage_mode				:=	AXIS_CAM_ENGAGE_RELATIVE,
			slave_engage_mode				:=	AXIS_CAM_ENGAGE_RELATIVE,
			activation_mode					:=	AXIS_CAM_ACTIVATION_NEXT_CYCLE,
			activation_position				:=	0,
			master_scaling_mode				:=	AXIS_CAM_SCALING_MODE_USER_DEFINED,
			slave_scaling_mode				:=	AXIS_CAM_SCALING_MODE_USER_DEFINED,
			master_offset					:=	home_position_master_offset_deg, 
			slave_offset					:=	0.0,
			master_scaling					:=	master_scaling,
			slave_scaling					:=	slave_scaling,
			interpolation_type				:=	AXIS_CAM_INTERPOLATION_SPLINE,	 
			master							:=	csp_main_motorization_virtualManager.axis,
			CONVERSION_this					:=	axis);	
	
		IF	motorization_manager_is_starting(csp_main_motorization_manager.motm)
		THEN
			connection_status_next := CSP_CASE_STATUS_CONNECTION_DONE;
		ELSE
			//IF axis_is_cam_engaged(axis)
			//THEN
			connection_status_next := CSP_CASE_STATUS_CONNECTION_WAIT_NEW_CAM;
		END_IF
		//END_IF
	
	CSP_CASE_STATUS_CONNECTION_WAIT_NEW_CAM:
	
		IF	NOT connection_motorization_moving
		THEN
			connection_status_next := CSP_CASE_STATUS_CONNECTION_DONE;
		END_IF
	
		IF	active_cam = next_cam
		THEN
			connection_status_next := CSP_CASE_STATUS_CONNECTION_CHECK_CHANGE_CAM;
		END_IF
		
	CSP_CASE_STATUS_CONNECTION_DONE:	(* Connection done *)	
	
		connection_running := FALSE;
		connection_done := TRUE;
		
		IF	motorization_manager_is_starting(csp_main_motorization_manager.motm)
		THEN
			motorization_conditioner_start_done(connection_done_motcond);							
			//IF	active_cam <> next_cam
			//THEN
				//connection_status_next := CSP_CASE_STATUS_CONNECTION_WAIT_NEW_CAM;
			//ELSE
				
			//END_IF
		END_IF
		
		IF csp.o_machine_is_running 
		THEN
			connection_status_next := CSP_CASE_STATUS_CONNECTION_CHECK_CHANGE_CAM;
		ELSE
			;//DO NOTHING!! NO NEED TO RUN WHILE NOT IN EXECUTE
		END_IF
	
	CSP_CASE_STATUS_CONNECTION_ERROR:	(* Connection error *)	
	
		IF 	connection_running
		THEN
			axis_disable(axis);
			connection_error := TRUE;						
		END_IF
		connection_running	:= FALSE;
		connection_done 	:= FALSE;	
		
		IF	connection_conditions
		THEN		
			connection_status_next := CSP_CASE_STATUS_CONNECTION_START;
		END_IF
		
END_CASE

IF 	NOT debug_state_machine
	OR
	debug_connection_machine_one_step	
THEN
	connection_status := connection_status_next;
	debug_connection_machine_one_step := FALSE;
END_IF

connection_motorization_moving	:= 
	motorization_manager_is_starting(csp_main_motorization_manager.motm)
	OR
	motorization_manager_is_execute(csp_main_motorization_manager.motm)
	OR
	motorization_manager_is_stopping(csp_main_motorization_manager.motm)
	OR
	motorization_manager_is_suspended(csp_main_motorization_manager.motm)
	OR
	motorization_manager_is_suspending(csp_main_motorization_manager.motm)
	OR
	motorization_manager_is_unsuspending(csp_main_motorization_manager.motm)
	OR 
	motorization_manager_is_holding(csp_main_motorization_manager.motm)
	OR
	motorization_manager_is_held(csp_main_motorization_manager.motm)
	OR
	motorization_manager_is_unholding(csp_main_motorization_manager.motm);	
	
(* Connection timeout *)
IF	(connection_running
	AND NOT debug_state_machine)	
	OR connection_error
THEN
	IF	timer_is_expired(connection_time_out_tmr)
	THEN
		process_message_set(1, connection_status, 0, connection_faulted_aem);
	END_IF
ELSE
	timer_restart(10000, connection_time_out_tmr);
END_IF
]]></ST>
      </Implementation>
    </Action>
    <Action Name="phase" Id="{9c861cd0-940e-0c5d-1913-555f4e96835c}">
      <Implementation>
        <ST><![CDATA[phase_conditions :=
	axis_is_ok(FALSE, axis)
	AND
	process_is_ready(prc)
	AND
	process_subtree_is_ready(prc)
	AND
	NOT jog_manager_is_jog_axis_active(JOG_LIST_CSP_CASE_VIRTUAL, csp_main_jogManager.jog_manager_virtual)
	AND
	csp_main_motorization.motorization_axis_redefined_at_powerup
	AND
	NOT disable_req;		
	
(* phase_done reset *)
IF	phase_done
	AND
	NOT phase_conditions
	//AND 
	//NOT csp.o_machine_is_running
THEN
	//axis_disable(axis);
	phase_done:= FALSE;
END_IF

(* Exit condition *)
IF 	NOT phase_conditions
THEN
	phase_status_next := CSP_CASE_PHASE_STATUS_ERROR;
	phase_status := phase_status_next;	
END_IF

(*************** MACHINE STATUS ***************)
CASE phase_status OF

	CSP_CASE_PHASE_STATUS_START:	(* Start phasing *)
	
		IF	(
				motorization_manager_is_starting(csp_main_motorization_manager.motm) //TODOPZ: da decidere a che livello usare le variabili di i e o: wn_feeding.i_motorization_is_starting?					
				//OR
				//jog_manager_is_jog_axis_active(JOG_LIST_CSP_CASE_VIRTUAL, csp_main_jogManager.jog_manager_virtual)
			)
		THEN
			phase_running := TRUE;			
			phase_status_next := CSP_CASE_PHASE_STATUS_DISABLE;
		END_IF
						
	CSP_CASE_PHASE_STATUS_DISABLE:
	
		axis_disable(axis);		
		
		IF 	axis_is_disabled(axis)
		THEN
			phase_status_next := CSP_CASE_PHASE_STATUS_ENABLE;
		END_IF
		
	CSP_CASE_PHASE_STATUS_ENABLE:
	
		axis_enable(axis);
		
		IF 	axis_is_enabled(axis)
		THEN
			phase_status_next := CSP_CASE_PHASE_STATUS_ENABLED;
		END_IF
		
	CSP_CASE_PHASE_STATUS_ENABLED:
	
		IF 	axis_is_standstill(axis) 
		THEN
			phase_status_next := CSP_CASE_PHASE_STATUS_CALCULATE_SLAVE_POSITION_REQUEST;								
		END_IF
		
	CSP_CASE_PHASE_STATUS_CALCULATE_SLAVE_POSITION_REQUEST:
	
		slave_position_has_been_calculated := FALSE;
	
		(* Gets the position of the master axis *)
		axis_calculate_cam_slave_master_position_deg := 
			LMOD(axis_get_actual_modulo_position(csp_main_motorization_virtualManager.axis)
			+ home_position_master_offset_deg, G_MODULO_360_DEG);
			
		(* Gets cam data for slave axis to master *)
		IF 	axis_calculate_cam_slave_dynamics_data(
				cam_id := active_cam,
				master_scaling := master_scaling,
				master_position := axis_calculate_cam_slave_master_position_deg,
				slave_scaling := slave_scaling,
				CONVERSION_this := axis)
		THEN
			phase_status_next := CSP_CASE_PHASE_STATUS_CALCULATING_SLAVE_POSITION;
		END_IF
	
	CSP_CASE_PHASE_STATUS_CALCULATING_SLAVE_POSITION:
	
		IF 	axis_cam_slave_dynamics_data_calculated(axis)
		THEN
			axis_calculated_cam_slave_position_deg := axis_get_cam_slave_dynamics_position(axis);
			slave_position_has_been_calculated := TRUE;
			phase_status_next := CSP_CASE_PHASE_STATUS_REQUEST;
		END_IF
		
	CSP_CASE_PHASE_STATUS_REQUEST:
		
		IF	axis_is_standstill(axis)
		THEN
		 	axis_move_absolute(
				position 		:= axis_calculated_cam_slave_position_deg,
				velocity 		:= phase_velocity_degps,
				direction		:= AXIS_SHORTEST_WAY,
				acceleration 	:= MOTOR_MAX_ACCELLERATION_DEGPS2,
				deceleration 	:= MOTOR_MAX_DECELLERATION_DEGPS2, 
				jerk 			:= MOTOR_MAX_JERK_DEGPS3, 
				buffer_mode 	:= AXIS_BUFFER_MODE_BUFFERED,
				CONVERSION_this := axis
				); 
			
		END_IF

		IF 	axis_is_absolute_moving(axis)
		THEN
			phase_status_next	:=	CSP_CASE_PHASE_STATUS_PHASING;
		END_IF

	CSP_CASE_PHASE_STATUS_PHASING:

		IF 	axis_is_standstill(axis)
		THEN
			phase_status_next	:=	CSP_TRANSFER_STATUS_PHASED;
		END_IF

	CSP_TRANSFER_STATUS_PHASED:

		IF 	engage_enable
		THEN
			phase_status_next := CSP_CASE_PHASE_STATUS_DONE;
		END_IF
		
		
	CSP_CASE_PHASE_STATUS_DONE:	(* Phase done *)		
	
		phase_running := FALSE;
		phase_done := TRUE;				
	
	CSP_CASE_PHASE_STATUS_ERROR:	(* Phase error *)
		

		IF	phase_running
		THEN
			phase_error := TRUE;
			axis_disable(axis);									
		END_IF
		phase_running := FALSE;
		
		IF	phase_conditions 	
		THEN
			phase_status_next := CSP_CASE_PHASE_STATUS_START;
		END_IF
		
END_CASE

IF 	NOT debug_state_machine
	OR
	debug_phase_machine_one_step	
THEN
	phase_status := phase_status_next;
	debug_phase_machine_one_step := FALSE;
END_IF

(* Phasing timeout *)
IF (phase_running
	AND NOT debug_state_machine)
	OR phase_error
THEN
	IF	timer_is_expired(phase_time_out_tmr)
	THEN
		process_message_set(1, phase_status, 0, phase_faulted_aem);
	END_IF
ELSE
	timer_restart(10000, phase_time_out_tmr);
END_IF

]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>