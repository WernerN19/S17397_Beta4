<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="csp_case_fc_ls_upper_leadingMinorCloser" Id="{3d6d98dd-ee60-4488-a466-75168311b89d}" SpecialFunc="None">
    <Declaration><![CDATA[(*********************************** G.D S.p.A. - Technical Department ***********************************
============= PROGRAM INFO ============
FOLDER:             TBD
MACHINES INVOLVED:  TBD 

============= DESCRIPTION =============
csp machine declaration

============= REVISIONS ===============
Date		Version	 	Author      	Description             
----------	-------		------------  	--------------------------------------------
2019/04/05 	0000.00	 	M.Grasso		Creation of the PRG

**********************************************************************************************************)
(*$R process_ref := prc; $*)
PROGRAM csp_case_fc_ls_upper_leadingMinorCloser
VAR
	
	prc:												process;
	prc_path:											STRING;
	
	fsm_enable_condition:								BOOL := FALSE;
	fsm_next_status:									csp_case_flap_control_status_enum;
	fsm_status:											csp_case_flap_control_status_enum;
	
	axis:												axis;
	phase_velocity_degps:								LREAL := 20;
	axis_calculate_cam_slave_master_position_deg:		LREAL := 0.0;
	axis_calculated_cam_slave_position_deg:				LREAL := 0.0;
	slave_position_has_been_calculated:					BOOL  := FALSE;
	phase_enable:										BOOL:=TRUE;
	engage_enable:										BOOL:=TRUE;
	disable_req:										BOOL:=FALSE;
	debug_state_machine:								BOOL:=FALSE;
	debug_state_machine_one_step:						BOOL:=FALSE;
	home_position_master_offset_deg: 					LREAL := 0; 
	cam_id:												INT := 10; //CASE_FC_LEADINGCLOSER_LS_RUN_CAM;
	slave_scaling:										LREAL := 348;(*$P $*)
	master_scaling:										LREAL := 1; 
	master_offset:										LREAL := 4;(*$P $*)
	slave_offset: 										LREAL := 0; (*$P $*)
	torque_limit:										INT := 2000;    (*$P $*)
	torque_limit_old:									INT;
	
	in_accu_safe_pos:                                   BOOL := FALSE;
    accu_tolerance:                                     LREAL := 5;
    accu_safe_pos:                                      LREAL := 0;

	
	test_1: 											BOOL := FALSE;
	test_2: 											BOOL := FALSE;
	servo_on_condition: 								BOOL;
	
	
	not_clear_of_loader_aem:							message;
	
	(* TEST LOGIC TO RUN ON TWO MASTERS *)
	(* PHASE AND CONNECTION TEST *)
	connection_status: 									csp_case_connection_status_enum;
	connection_status_next: 							csp_case_connection_status_enum;
	connection_done: 									BOOL;
	connection_running: 								BOOL;
	connection_error:									BOOL;
	connection_time_out_tmr:							timer;
	connection_faulted_aem:	 							message;
	connection_conditions:								BOOL;
	connection_done_motcond:							motorization_conditioner;
	connection_motorization_moving:						BOOL;
	
	phase_status: 										csp_case_phase_status_enum;
	phase_status_next: 									csp_case_phase_status_enum;
	phase_running: 										BOOL;
	phase_error:										BOOL;
	phase_time_out_tmr:									timer;
	phase_faulted_aem:	 								message;
	phase_conditions:									BOOL;
	
	debug_phase_machine_one_step:						BOOL := FALSE;
	debug_connection_machine_one_step:					BOOL := FALSE;
	
	active_cam:											DINT := DWELL_CAM;
	next_cam:											DINT := DWELL_CAM;
	
	phase_done: 										BOOL := FALSE;
	
	at_downstream_pos:									BOOL;
	at_upstream_pos:									BOOL;
	pos_tolerance:										LREAL := 15;

	
	dwell:												BOOL;
	run_upstream:										BOOL;
	run_downstream:										BOOL;
	
	engage_mode:										axis_cam_engage_mode_enum;
	master_offset_phase:								LREAL;
	master_engage_mode:									axis_cam_engage_mode_enum;
	slave_offset_input:									LREAL := 0;
	
	downstream_run_ph:									phase;
	downstream_run_phase_deg:							LREAL := 178;
	upstream_run_ph:									phase;
	upstream_run_phase_deg:								LREAL := 358;
	
	enable_delay: 										TON;
	phase_NEG: 											BOOL;
	Torque_force_constant: 								LREAL := 0.47;
END_VAR

VAR CONSTANT
	(*Just in case you prefer having constants instead of numbers*)
	MOTOR_MAX_VELOCITY_DEGPS:							LREAL := 9600;
	MOTOR_MAX_ACCELLERATION_DEGPS2:						LREAL := 4800;
	MOTOR_MAX_DECELLERATION_DEGPS2:						LREAL := 4800;
	MOTOR_MAX_JERK_DEGPS3:								LREAL := 100000000; 
	MOTOR_MAX_FOLLOWING_ERROR_DEG:						LREAL := 2;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[_read_var_input();

_object_manager();

IF NOT objects_running()
THEN
	RETURN;	
END_IF

_read_process_image();

_mode_manager();

CASE process_get_mode(prc) OF
	MODE_ABSENT:
		IF axis_get_mode(axis) = MODE_TEST
		THEN
			safety_integrated_series_close(csp_case_main_safety_drives_SD10300.chB_smes_sis);
		END_IF
		
		(* When upstream and stack in case, next cycle dwell due to case virtual dwell after guided test activation *)
		IF at_upstream_pos AND csp_transfer_upstacker.stack_in_case_at_loader
		THEN
			next_cam := DWELL_CAM;
		END_IF
		
		RETURN;
	MODE_INACTIVE:
		RETURN;
	MODE_TEST:
		_handle_process_test();
END_CASE

_set_runtime_properties();

test_1:=	(
			(motorization_manager_is_starting(csp_main_motorization_manager.motm))
			OR
			jog_manager_is_jog_axis_active(JOG_LIST_CSP_CASE_LOADER_VIRTUAL, csp_main_jogManager.jog_manager_virtual));
			
test_2 := jog_manager_is_jog_axis_active(JOG_LIST_CSP_CASE_LOADER_VIRTUAL, csp_main_jogManager.jog_manager_virtual);

(********************************* BODY *********************************)
axis.actual_torque := (axis.actual_current * Torque_force_constant)/1000;

//Checks if axis position is within the acc-u-change safe position
IF 	ABS(axis.actual_position - accu_safe_pos)  < accu_tolerance
THEN
	in_accu_safe_pos := TRUE;
ELSE
	in_accu_safe_pos := FALSE;   
END_IF

// Sets the torque limit for the leadling Flap Closer LS
IF 	torque_limit <> Torque_limit_old
	THEN
	 IF soe_drive_channel_write_parameter(
		channel:=csp_case_fc_ls_upper_leadingMinorCloser.axis.soe_drive_channel, 
		idn:= S_0_IDN + 92, 
		data_element:=soe_drive_element_value , 
		data_source:= ADR(torque_limit), 
		data_lenght:= SIZEOF(torque_limit), 
		CONVERSION_this:= csp_case_fc_ls_upper_leadingMinorCloser.axis.soe_drive^)= SOE_DRIVE_RETURN_VALUE_DONE
	THEN	
		torque_limit_old := Torque_limit;
	END_IF	
END_IF

// Manage the accu change safe position
fsm_enable_condition := axis_is_ok(FALSE, axis)	
						AND							
						csp_main_accuChange.Brand_Change_Occurred;
										
IF	NOT fsm_enable_condition
	AND
	fsm_status <> CSP_CASE_FLAP_CONTROL_STATUS_DISABLED	
THEN
	fsm_next_status	:= CSP_CASE_FLAP_CONTROL_STATUS_DISABLED;
END_IF
					
CASE fsm_status OF
	
	CSP_CASE_FLAP_CONTROL_STATUS_NOT_INITIALIZED:
	
        IF	axis_is_ok(return_when_absent := TRUE, CONVERSION_this := axis)
        THEN
            fsm_next_status := CSP_CASE_FLAP_CONTROL_STATUS_DISABLED;
        END_IF

		
	CSP_CASE_FLAP_CONTROL_STATUS_DISABLED:
		IF	fsm_enable_condition
			AND
			motorization_conditioner_is_execute(csp_main_services_towerLamp.buzzer_motcond) 							
		THEN	
			IF	in_accu_safe_pos
			THEN
				fsm_next_status := CSP_CASE_FLAP_CONTROL_STATUS_CHANGE_OVER_MODE_DONE;
			ELSE								
				fsm_next_status := CSP_CASE_FLAP_CONTROL_STATUS_ENABLE_REQUEST;
			END_IF
		END_IF;
		

	CSP_CASE_FLAP_CONTROL_STATUS_ENABLE_REQUEST:
	
		axis_enable(axis);
		IF 	axis_is_standstill(axis)
		THEN
			fsm_next_status	:=	CSP_CASE_FLAP_CONTROL_STATUS_ENABLED;
		END_IF;	
		
		
	CSP_CASE_FLAP_CONTROL_STATUS_ENABLED:	
	
		IF 	csp_case_loader_guide_downstream.in_accu_safe_pos
			AND csp_case_loader_guide_upstream.in_accu_safe_pos
		THEN
			axis_move_absolute(
				position 		:= accu_safe_pos,
				velocity 		:= phase_velocity_degps * 5,
				direction		:= AXIS_SHORTEST_WAY,
				acceleration 	:= MOTOR_MAX_ACCELLERATION_DEGPS2,
				deceleration 	:= MOTOR_MAX_DECELLERATION_DEGPS2,
				jerk 			:= MOTOR_MAX_JERK_DEGPS3, 
				buffer_mode 	:= AXIS_BUFFER_MODE_ABORTING,
				CONVERSION_this := axis);
		END_IF
			
		IF 	axis_is_absolute_moving(axis)
		THEN
			fsm_next_status	:= CSP_CASE_FLAP_CONTROL_STATUS_CHANGE_OVER_MODE;
		END_IF
		
		
	CSP_CASE_FLAP_CONTROL_STATUS_CHANGE_OVER_MODE:
	
		IF 	axis_is_standstill(axis)
		THEN	
			axis_disable(axis);					
			fsm_next_status := CSP_CASE_FLAP_CONTROL_STATUS_CHANGE_OVER_MODE_DONE;
		END_IF
		
		
	CSP_CASE_FLAP_CONTROL_STATUS_CHANGE_OVER_MODE_DONE:
	
		;
		
		
	CSP_CASE_FLAP_CONTROL_STATUS_STOP_REQUEST:
	
		axis_stop(
		    deceleration 		:= MOTOR_MAX_DECELLERATION_DEGPS2,
		    jerk 				:= MOTOR_MAX_JERK_DEGPS3,
		    CONVERSION_this 	:= axis);

		IF 	axis_is_standstill(axis)
			OR
			NOT axis_is_ok(FALSE, axis)
			OR
			axis_is_disabled(axis)
		THEN
			fsm_next_status := CSP_CASE_FLAP_CONTROL_STATUS_DISABLE_REQUEST;
		END_IF
		
		
	CSP_CASE_FLAP_CONTROL_STATUS_DISABLE_REQUEST:
	
   		axis_disable(axis);
   		fsm_next_status := CSP_CASE_FLAP_CONTROL_STATUS_DISABLING;

		
	CSP_CASE_FLAP_CONTROL_STATUS_DISABLING:
	
        IF	axis_is_disabled(axis)
        THEN
            fsm_next_status := CSP_CASE_FLAP_CONTROL_STATUS_DISABLED;
        END_IF;
		
END_CASE

IF 	NOT debug_state_machine
	OR
	debug_state_machine_one_step
THEN
	fsm_status := fsm_next_status;
	debug_state_machine_one_step := FALSE;
END_IF



phase_set_data(
	phase				:= downstream_run_phase_deg,
	delay				:= 0,			
	max_compensation	:= 0,			
	CONVERSION_this		:= downstream_run_ph);
	
phase_set_data(
	phase				:= upstream_run_phase_deg,
	delay				:= 0,			
	max_compensation	:= 0,			
	CONVERSION_this		:= upstream_run_ph);


(* TEMPORARY CAM CHANGE *)
//cam_change(); STILL USING HARDCODED TEMPORARILY

IF csp_main_brand.count = '10Count'
	THEN
		cam_id := 10;
ELSIF csp_main_brand.count = '24Count'
	THEN
		cam_id := 10;
ELSIF csp_main_brand.count = '32Count'
	THEN
		cam_id := 10;
ELSIF csp_main_brand.count = '48Count'
	THEN
		cam_id := 16;
END_IF	

(* CHECK IF AXIS AT DOWNSTREAM POS - NEXT RUN WITH LOADER *)
IF 	ABS(axis.actual_position - master_offset) < pos_tolerance
THEN
	at_downstream_pos := TRUE;
ELSE
	at_downstream_pos := FALSE;
END_IF


(* CHECK IF AXIS AT UPSTREAM POS - NEXT RUN WITH TRANSPORT *)
IF 	ABS(axis.actual_position - slave_scaling) < pos_tolerance
THEN
	at_upstream_pos := TRUE;
ELSE
	at_upstream_pos := FALSE;
END_IF


(* Connection Done *)
IF connection_done
THEN 
	motorization_conditioner_start_done(connection_done_motcond);
END_IF


(* RESETS AXES IF PHASE DONE AND CONNECTION DONE AND DISABLED *)
IF 	phase_done
	AND connection_done
	AND axis_is_disabled(axis)
THEN
	phase_done := FALSE;
	connection_done := FALSE;
END_IF

(* CLEARS PHASE AND CONNECTION ERRORS ON STOP *)
IF 	machine_is_stopped(csp.mch)
	OR machine_is_stop_emergency_active(csp.mch)
THEN
	phase_error := FALSE;
	connection_error := FALSE;	
END_IF



(* CHECKS IF AXIS IS DOWNSTREAM AND NEEDS TO RUN UPSTREAM WITH LOADER *)
IF 	phase_edge(downstream_run_ph) // 175 of moto
	AND at_downstream_pos
	THEN
		IF (
				axis_is_cam_engaged(csp_case_loader_virtualMaster.axis)
				AND csp_case_loader_virtualMaster.active_cam = FORWARD_CAM
			)
			OR 
			(
				csp_transfer_upstacker.stack_in_case_at_loader
				AND
				csp_case_loader.case_at_loader
			)
			OR 
			(
				(* Added to cycle during Clean out mode and empty load cycles *)
				NOT csp_transfer_upstacker.stack_in_case_at_loader
				AND	NOT csp_case_loader.case_at_loader
				AND axis_is_cam_engaged(csp_case_loader_virtualMaster.axis)
				AND csp_case_loader_virtualMaster.active_cam <> FORWARD_CAM
			)
		THEN
			dwell := FALSE;
			run_upstream := TRUE;
		ELSE
			run_upstream := FALSE;
			dwell := TRUE;
		END_IF
END_IF



(* CHECKS IF AXIS IS UPSTREAM AND NEEDS TO RUN DOWNSTREAM WITH TRANSPORT *)
IF 	phase_edge(upstream_run_ph) // 355 of moto
	AND at_upstream_pos
THEN
	IF (
			csp_case_virtualMaster.next_cam = FORWARD_CAM
			AND 
			NOT csp_case_transport_virtualMaster.stop_for_reject
		)
		OR 
		(
			NOT csp_transfer_upstacker.stack_in_case_at_loader
			AND	csp_case_loader.case_at_loader
			AND	csp_transfer_upstacker.stack_at_loader
		)
	
	THEN
		dwell := FALSE;
		run_downstream := TRUE;
	ELSE
		run_downstream := FALSE;
		dwell := TRUE;
	END_IF
END_IF


phase();
connection();

IF active_cam = 0
THEN
	active_cam := DWELL_CAM;
END_IF


(* CHECKS THAT LEADING MINOR IS CLEAR OF LOADER AXES IF MOVING *)
IF 	csp_case_loader_pusher.axis.actual_position > 225
	AND csp_case_loader_virtualMaster.axis.actual_position < 135
	AND NOT at_downstream_pos
	AND axis_is_moving(csp_main_motorization_virtualManager.axis)
THEN
		process_message_set(1, 1, 1, not_clear_of_loader_aem);
END_IF

IF 	process_message_is_on(not_clear_of_loader_aem)
	AND (machine_is_stopped(csp.mch) OR machine_is_stop_emergency_active(csp.mch))
THEN
	process_message_reset(not_clear_of_loader_aem);
END_IF


(************************************************************************)

_handle_messages();

_write_output();]]></ST>
    </Implementation>
    <Action Name="_handle_messages" Id="{4d0ff360-eb23-4199-9cdb-d89eb13a4871}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_handle_process_test" Id="{83291496-443e-4895-a654-80b511666d48}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_mode_manager" Id="{9ecf2941-645c-4640-8201-914432b0d263}">
      <Implementation>
        <ST><![CDATA[IF process_mode_req_is_pending(prc)
THEN
    process_apply_mode_req_first_step(prc);
    CASE process_get_mode(prc) OF
        MODE_TO_ABSENT:
			;
        MODE_TO_INACTIVE:
			;
        MODE_TO_TEST:
			;
        MODE_TO_OPERATIONAL:
			;
    END_CASE
    process_apply_mode_req_second_step(prc);
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_object_manager" Id="{1d00b2ef-bc3a-4472-b91f-eff91f20045d}">
      <Implementation>
        <ST><![CDATA[IF objects_initialization()
THEN
	sub_process_init(
		object_name					:= 'csp_case_fc_ls_upper_leadingMinorCloser.prc', 
		process						:= csp_case_fc_ls_upper.prc, 
		CONVERSION_this				:= prc);
		
	prc_path 						:= process_get_path(prc);
	
	(* axis smes *)
	IF csp_main_configurator.Physical_hw
	THEN
		
		axis_init(
			object_name								:= CONCAT(prc_path, '_axis'), 
			axis_type								:= AXIS_TYPE_SERVO, 
			encoder_scaling_factor					:= G_SERVO_ENCODER_SCALING_FACTOR_DEGPINC,
			modulo									:= G_NO_MODULO_DEG, 
			process									:= prc, 
			CONVERSION_this							:= axis);
			
		axis_add_safety_integrated_series(
			safety_integrated_series 	:= csp_case_main_safety_drives_SD10300.chB_smes_sis,
			CONVERSION_this				:= axis);
			
			
		axis_init_absolute_encoder_preset(
			position                                := 0.0,
			CONVERSION_this                         := axis);
			
			
	ELSE
		axis_init(
			object_name								:= CONCAT(prc_path, '_axis'), 
			axis_type								:= AXIS_TYPE_VIRTUAL, 
			encoder_scaling_factor					:= G_VIRTUAL_ENCODER_SCALING_FACTOR_DEGPINC,
			modulo									:= G_MODULO_360_DEG, 
			process									:= prc, 
			CONVERSION_this							:= axis);		
				
	END_IF
	
	axis_set_max_dynamic(
		reference_velocity						:=	MOTOR_MAX_VELOCITY_DEGPS,
		velocity								:=	MOTOR_MAX_VELOCITY_DEGPS,
		acceleration							:=	MOTOR_MAX_ACCELLERATION_DEGPS2,
		deceleration							:=	MOTOR_MAX_DECELLERATION_DEGPS2,
		jerk									:=	MOTOR_MAX_JERK_DEGPS3,
		following_error							:=	MOTOR_MAX_FOLLOWING_ERROR_DEG,
		CONVERSION_this							:=	axis);
		
	axis_add_soe_drive(
		channel						:=	SOE_DRIVE_CHANNEL_B,
		soe_drive					:=	csp_case_main_drives.SD10300_drv,
		CONVERSION_this				:=	axis);

		
	phase_init(
        object_name 				:= CONCAT(prc_path, '_downstream_run_ph'),
        phase 						:= 0,	//Set at runtime!
        delay 						:= 0,
        max_compensation 			:= 0,
        generator 					:= csp_main_motorization_virtualManager.phgen,
        process 					:= prc,
        CONVERSION_this 			:= downstream_run_ph);
		
	phase_init(
        object_name 				:= CONCAT(prc_path, '_upstream_run_ph'),
        phase 						:= 0,	//Set at runtime!
        delay 						:= 0,
        max_compensation 			:= 0,
        generator 					:= csp_main_motorization_virtualManager.phgen,
        process 					:= prc,
        CONVERSION_this 			:= upstream_run_ph);
		
		
	process_message_init(
		object_name					:=	CONCAT(prc_path, '_phase_faulted_aem'), 
		behaviour					:=	MESSAGE_BEHAVIOUR_EVENT,
		reset_timeout				:=	0,
		disableable					:=	TRUE,
		individual_reset			:=	FALSE,
		machine_reaction			:=	MACHINE_REACTION_NORMAL_STOP,
		typology					:=	MESSAGE_TYPOLOGY_ABNORMAL,
		process						:=	prc,
		CONVERSION_this				:=	phase_faulted_aem);
	
	timer_init(
		object_name					:= CONCAT(prc_path, 'phase_time_out_tmr'),
		process						:= prc,
		CONVERSION_this				:= phase_time_out_tmr);
	
	process_message_init(
		object_name					:=	CONCAT(prc_path, '_connection_faulted_aem'), 
		behaviour					:=	MESSAGE_BEHAVIOUR_EVENT,
		reset_timeout				:=	0,
		disableable					:=	TRUE,
		individual_reset			:=	FALSE,
		machine_reaction			:=	MACHINE_REACTION_NORMAL_STOP,
		typology					:=	MESSAGE_TYPOLOGY_ABNORMAL,
		process						:=	prc,
		CONVERSION_this				:=	connection_faulted_aem);
	
	timer_init(
		object_name					:= CONCAT(prc_path, 'connection_time_out_tmr'),
		process						:= prc,
		CONVERSION_this				:= connection_time_out_tmr);
		
	motorization_conditioner_init(
		object_name					:=	CONCAT(prc_path, 'connection_done_motcond'),
		velocity_limit				:=	0.0,
		velocity_limit_active		:=	FALSE,
		idle_handshake_active		:=	FALSE,
		execute_handshake_active	:=	TRUE,
		hold_handshake_active		:=	FALSE,
		suspend_handshake_active	:=	FALSE,
		complete_handshake_active	:=	FALSE,
		abort_handshake_active		:=	FALSE,
		stop_handshake_active		:=	FALSE,
		origin						:=	MOTORIZATION_CONDITIONER_ORIGIN_INTERNAL,
		manager						:=	csp_main_motorization_manager.motm,
		process						:=	prc,
		CONVERSION_this				:=	connection_done_motcond);
	
		
	process_message_init(
		object_name					:=	CONCAT(prc_path, '_not_clear_of_loader_aem'), 
		behaviour					:=	MESSAGE_BEHAVIOUR_EVENT,
		reset_timeout				:=	0,
		disableable					:=	FALSE,
		individual_reset			:=	FALSE,
		machine_reaction			:=	MACHINE_REACTION_EMERGENCY_STOP,
		typology					:=	MESSAGE_TYPOLOGY_EMERGENCY,
		process						:=	prc,
		CONVERSION_this				:=	not_clear_of_loader_aem);
		
END_IF

IF objects_running()
THEN
	process_cycle(prc);
	axis_cycle(axis);
	
	phase_cycle(downstream_run_ph);
	phase_cycle(upstream_run_ph);
	
	motorization_conditioner_cycle(connection_done_motcond);
	
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_read_process_image" Id="{14ec5486-82df-43db-bfd7-b7ca7d87c173}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_read_var_input" Id="{071deb1b-a787-4725-8282-f2da66686f6b}">
      <Implementation>
        <ST><![CDATA[disable_req := csp_case.disable_req;
;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_set_runtime_properties" Id="{6864b42e-f690-4958-af3d-3ac099366e91}">
      <Implementation>
        <ST><![CDATA[enable_delay(IN:=axis_is_ready_to_enable(axis) , PT:=T#2S , Q=> servo_on_condition , ET=> );
(* Cam management *)
IF 	connection_done
THEN
	active_cam := axis.engaged_cam.cam_id;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_write_output" Id="{96a4ca90-ea15-4b60-8d01-81c19870bdbc}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="connection" Id="{ec9fa563-c92b-0549-2105-77e9653823af}">
      <Implementation>
        <ST><![CDATA[connection_conditions :=	
	NOT process_message_is_on(connection_faulted_aem)
	//AND
	//NOT jog_manager_is_jog_axis_active(JOG_LIST_CSP_CASE_VIRTUAL, csp_main_jogManager.jog_manager_virtual)
	AND
	phase_done;

(* connection_done reset *)
IF	connection_done
	AND	
	NOT connection_conditions
	AND
	NOT csp.o_machine_is_running
THEN
	connection_done := FALSE;
END_IF

(* Exit conditions *)
IF	NOT connection_conditions 
	AND
	NOT motorization_manager_is_stopping(csp_main_motorization_manager.motm)	
THEN	
	connection_status_next := CSP_CASE_STATUS_CONNECTION_ERROR;
	connection_status := connection_status_next;	
END_IF

(*************** MACHINE STATUS ***************)
CASE connection_status OF

	CSP_CASE_STATUS_CONNECTION_START:	(* Start connection *)
		IF	(
				motorization_manager_is_starting(csp_main_motorization_manager.motm) 
				OR
				jog_manager_is_jog_axis_active(JOG_LIST_CSP_CASE_VIRTUAL, csp_main_jogManager.jog_manager_virtual)
			)
		THEN
			connection_running := TRUE;
			connection_status_next := CSP_CASE_STATUS_CONNECTION_ENGAGE;
		END_IF
		
	CSP_CASE_STATUS_CONNECTION_ENGAGE:		
	
		IF 	active_cam = cam_id //CASE_FC_LEADING_MINOR_RUN_DOWNSTREAM_RUN_CAM
			OR active_cam = CASE_FC_LEADING_MINOR_RUN_UPSTREAM_RUN_CAM
		THEN
			engage_mode := AXIS_CAM_ENGAGE_ABSOLUTE;
			slave_offset := slave_offset_input;
			master_engage_mode := AXIS_CAM_ENGAGE_RELATIVE;
			master_offset_phase := csp_case_fc_ls_upper_leadingMinorCloser_virtual.axis.actual_position;
		ELSIF active_cam = DWELL_CAM
		THEN
			engage_mode := AXIS_CAM_ENGAGE_RELATIVE;
			slave_offset := 0;
			master_engage_mode := AXIS_CAM_ENGAGE_ABSOLUTE;
			master_offset_phase := 0;
		END_IF
	
		IF axis_engage_cam(
			cam_id							:=	active_cam,	
			master_engage_mode				:=	master_engage_mode,
			slave_engage_mode				:=	engage_mode,
			activation_mode					:=	AXIS_CAM_ACTIVATION_IMMEDIATELY,
			activation_position				:=	0.0,
			master_scaling_mode				:=	AXIS_CAM_SCALING_MODE_USER_DEFINED,
			slave_scaling_mode				:=	AXIS_CAM_SCALING_MODE_USER_DEFINED,
			master_offset					:=	master_offset + master_offset_phase,  // RMH TEST OF MASTER OFF
			slave_offset					:=	slave_offset,
			master_scaling					:=	master_scaling,
			slave_scaling					:=	slave_scaling,
			interpolation_type				:=	AXIS_CAM_INTERPOLATION_SPLINE, 
			master							:=	csp_case_fc_ls_upper_leadingMinorCloser_virtual.axis,
			CONVERSION_this					:=	axis)
		THEN
			connection_status_next:= CSP_CASE_FLAP_CONTROL_STATUS_CONNECTION_ENGAGED;
		END_IF
			
			
	CSP_CASE_STATUS_CONNECTION_ENGAGED:
	
		IF active_cam = 0
		THEN
			active_cam := next_cam;
		END_IF
	
		IF 	axis_is_cam_engaged(axis) 
		THEN				
			IF	active_cam <> next_cam
			THEN							
				connection_status_next := CSP_CASE_FLAP_CONTROL_STATUS_CONNECTION_CHANGE_CAM;
			ELSE
				connection_status_next:= CSP_CASE_FLAP_CONTROL_STATUS_CONNECTION_DONE;
			END_IF
		END_IF
		
	CSP_CASE_STATUS_CONNECTION_CHECK_CHANGE_CAM:						
		
		(* DWELL *)
		IF 	dwell
		THEN
			IF active_cam = DWELL_CAM
			THEN
				dwell := FALSE;
				run_upstream := FALSE;
				run_downstream := FALSE;
			ELSE
				dwell := FALSE;
				run_upstream := FALSE;
				run_downstream := FALSE;
				next_cam := DWELL_CAM;
			(*ELSIF active_cam =	cam_id //CASE_FC_LEADING_MINOR_RUN_DOWNSTREAM_RUN_CAM;
				THEN	
					dwell := FALSE;
					run_upstream := FALSE;
					run_downstream := FALSE;
					next_cam := DWELL_CAM;
			ELSIF active_cam = CASE_FC_LEADING_MINOR_RUN_UPSTREAM_RUN_CAM
				THEN	
					dwell := FALSE;	
					run_upstream := FALSE;	
					run_downstream := FALSE; 	
					next_cam := DWELL_CAM;*)				
			END_IF
		END_IF
		
		
		(* RUN UPSTREAM *)
		IF 	run_upstream
		THEN
			IF active_cam = CASE_FC_LEADING_MINOR_RUN_UPSTREAM_RUN_CAM
			THEN
				run_upstream := FALSE;
				dwell := FALSE;	
				run_downstream := FALSE; 
			ELSE
				run_upstream := FALSE;
				dwell := FALSE;	
				run_downstream := FALSE; 
				next_cam := CASE_FC_LEADING_MINOR_RUN_UPSTREAM_RUN_CAM;
			END_IF
			(*IF active_cam = DWELL_CAM
				THEN
					run_upstream := FALSE;
					dwell := FALSE;	
					run_downstream := FALSE; 
					next_cam := CASE_FC_LEADING_MINOR_RUN_UPSTREAM_RUN_CAM;
			ELSIF active_cam = cam_id //CASE_FC_LEADING_MINOR_RUN_DOWNSTREAM_RUN_CAM;
				THEN	
					run_upstream := FALSE;
					dwell := FALSE;	
					run_downstream := FALSE; 
					next_cam := CASE_FC_LEADING_MINOR_RUN_UPSTREAM_RUN_CAM;
			ELSIF active_cam = CASE_FC_LEADING_MINOR_RUN_UPSTREAM_RUN_CAM
				THEN
					run_upstream := FALSE;
					dwell := FALSE;	
					run_downstream := FALSE; 		 					
			END_IF*)
		END_IF
		
		
		(* RUN DOWNSTREAM *)
		IF 	run_downstream
		THEN
			IF active_cam = cam_id //CASE_FC_LEADING_MINOR_RUN_DOWNSTREAM_RUN_CAM;
			THEN
				run_downstream := FALSE;
				dwell := FALSE;	
				run_upstream := FALSE;
			ELSE
				run_downstream := FALSE;	
				dwell := FALSE;	
				run_upstream := FALSE;		
				next_cam := cam_id; //CASE_FC_LEADING_MINOR_RUN_DOWNSTREAM_RUN_CAM;	
			END_IF
			(*IF active_cam = DWELL_CAM
				THEN
					run_downstream := FALSE;
					dwell := FALSE;	
					run_upstream := FALSE;	
					next_cam := cam_id; //CASE_FC_LEADING_MINOR_RUN_DOWNSTREAM_RUN_CAM;
			ELSIF active_cam = cam_id //CASE_FC_LEADING_MINOR_RUN_DOWNSTREAM_RUN_CAM;
				THEN
					run_downstream := FALSE;
					dwell := FALSE;	
					run_upstream := FALSE;	
			ELSIF active_cam = CASE_FC_LEADING_MINOR_RUN_UPSTREAM_RUN_CAM
				THEN
					run_downstream := FALSE;	
					dwell := FALSE;	
					run_upstream := FALSE;		
					next_cam := cam_id; //CASE_FC_LEADING_MINOR_RUN_DOWNSTREAM_RUN_CAM;				
			END_IF*)
		END_IF
		
		
		
		IF	(active_cam <> next_cam)
			AND connection_conditions
		THEN							
				connection_status_next := CSP_CASE_FLAP_CONTROL_STATUS_CONNECTION_CHANGE_CAM;
		END_IF
			
		IF	NOT connection_motorization_moving
		THEN
				connection_status_next := CSP_CASE_FLAP_CONTROL_STATUS_CONNECTION_DONE;
		END_IF
			
	
	CSP_CASE_STATUS_CONNECTION_CHANGE_CAM:	
		
		IF 	next_cam = cam_id //CASE_FC_LEADING_MINOR_RUN_DOWNSTREAM_RUN_CAM;
			OR next_cam = CASE_FC_LEADING_MINOR_RUN_UPSTREAM_RUN_CAM
		THEN
			engage_mode := AXIS_CAM_ENGAGE_ABSOLUTE;
			slave_offset := slave_offset_input;
		ELSIF next_cam = DWELL_CAM
		THEN
			engage_mode := AXIS_CAM_ENGAGE_RELATIVE;
			slave_offset := 0;
		END_IF
		
		(* DOUBLE CHECK NOT RUNNING WRONG CAM AT WRONG POS *)
		IF (
				next_cam = CASE_FC_LEADING_MINOR_RUN_UPSTREAM_RUN_CAM 
				AND 
				run_upstream
			)
			OR 
			(
				next_cam = cam_id //CASE_FC_LEADING_MINOR_RUN_DOWNSTREAM_RUN_CAM
				AND 
				run_downstream
			)
		THEN
			next_cam := DWELL_CAM;
			engage_mode := AXIS_CAM_ENGAGE_RELATIVE;
			slave_offset := 0;
			// CYCLE STOP MESSAGE
		END_IF
	
		
		axis_engage_cam(
			cam_id							:=	next_cam,	
			master_engage_mode				:=	AXIS_CAM_ENGAGE_RELATIVE,
			slave_engage_mode				:=	engage_mode,
			activation_mode					:=	AXIS_CAM_ACTIVATION_NEXT_CYCLE,
			activation_position				:=	0,
			master_scaling_mode				:=	AXIS_CAM_SCALING_MODE_USER_DEFINED,
			slave_scaling_mode				:=	AXIS_CAM_SCALING_MODE_USER_DEFINED,
			master_offset					:=	master_offset,  // RMH TEST OF MASTER OFF
			slave_offset					:=	slave_offset,
			master_scaling					:=	master_scaling,
			slave_scaling					:=	slave_scaling,
			interpolation_type				:=	AXIS_CAM_INTERPOLATION_SPLINE,	 
			master							:=	csp_case_fc_ls_upper_leadingMinorCloser_virtual.axis,
			CONVERSION_this					:=	axis);
	
		
	
		IF	motorization_manager_is_starting(csp_main_motorization_manager.motm)
		THEN
			connection_status_next := CSP_CASE_FLAP_CONTROL_STATUS_CONNECTION_DONE;
		ELSE
			IF 	axis_is_cam_engaged(axis)
			THEN
				connection_status_next := CSP_CASE_FLAP_CONTROL_STATUS_CONNECTION_WAIT_NEW_CAM;
			END_IF
		END_IF
	
	CSP_CASE_STATUS_CONNECTION_WAIT_NEW_CAM:
	
		IF	active_cam = next_cam
		THEN
			connection_status_next := CSP_CASE_FLAP_CONTROL_STATUS_CONNECTION_CHECK_CHANGE_CAM;
		END_IF
		
		IF	NOT connection_motorization_moving
		THEN
			connection_status_next := CSP_CASE_FLAP_CONTROL_STATUS_CONNECTION_DONE;
		END_IF
		
	CSP_CASE_STATUS_CONNECTION_DONE:	(* Connection done *)		
	
		connection_running := FALSE;
		connection_done := TRUE;
		
		IF	motorization_manager_is_starting(csp_main_motorization_manager.motm)
		THEN
			motorization_conditioner_start_done(connection_done_motcond);							
			IF	active_cam <> next_cam
			THEN
				connection_status_next := CSP_CASE_FLAP_CONTROL_STATUS_CONNECTION_WAIT_NEW_CAM;
			ELSE
				connection_status_next := CSP_CASE_FLAP_CONTROL_STATUS_CONNECTION_CHECK_CHANGE_CAM;
			END_IF
		END_IF
	
	CSP_CASE_STATUS_CONNECTION_ERROR:	(* Connection error *)	
		IF 	connection_running
		THEN
			axis_disable(axis);
			connection_error := TRUE;						
		END_IF
		
		connection_running	:= FALSE;
		connection_done 	:= FALSE;	
		
		IF	connection_conditions
		THEN		
			connection_status_next := CSP_CASE_STATUS_CONNECTION_START;
		END_IF
		
END_CASE

IF 	NOT debug_state_machine
	OR
	debug_connection_machine_one_step	
THEN
	connection_status := connection_status_next;
	debug_connection_machine_one_step := FALSE;
END_IF

connection_motorization_moving	:= 
	motorization_manager_is_starting(csp_main_motorization_manager.motm)
	OR
	motorization_manager_is_execute(csp_main_motorization_manager.motm)
	OR
	motorization_manager_is_stopping(csp_main_motorization_manager.motm)
	OR
	motorization_manager_is_suspended(csp_main_motorization_manager.motm)
	OR
	motorization_manager_is_suspending(csp_main_motorization_manager.motm)
	OR
	motorization_manager_is_unsuspending(csp_main_motorization_manager.motm)
	OR 
	motorization_manager_is_holding(csp_main_motorization_manager.motm)
	OR
	motorization_manager_is_held(csp_main_motorization_manager.motm)
	OR
	motorization_manager_is_unholding(csp_main_motorization_manager.motm);	
	
(* Connection timeout *)
IF	(connection_running
	AND NOT debug_state_machine)	
	OR connection_error
THEN
	IF	timer_is_expired(connection_time_out_tmr)
	THEN
		process_message_set(1, connection_status, 0, connection_faulted_aem);
	END_IF
ELSE
	timer_restart(10000, connection_time_out_tmr);
END_IF
]]></ST>
      </Implementation>
    </Action>
    <Action Name="phase" Id="{fe860d57-0f2f-0ced-203b-a273607718f1}">
      <Implementation>
        <ST><![CDATA[phase_conditions :=
	axis_is_ok(FALSE, axis)
	AND
	process_is_ready(prc)
	AND
	process_subtree_is_ready(prc)
	//AND
	//NOT jog_manager_is_jog_axis_active(JOG_LIST_CSP_CASE_VIRTUAL, csp_main_jogManager.jog_manager_virtual)
	AND
	csp_main_motorization.motorization_axis_redefined_at_powerup
	AND
	NOT disable_req;		
	
(* phase_done reset *)
IF	phase_done
	AND
	NOT phase_conditions
	//AND 
	//NOT csp.o_machine_is_running
THEN
	//axis_disable(axis);
	phase_done:= FALSE;
END_IF

(* Exit condition *)
IF 	NOT phase_conditions
THEN
	phase_status_next := CSP_CASE_PHASE_STATUS_ERROR;
	phase_status := phase_status_next;	
END_IF

(*************** MACHINE STATUS ***************)
CASE phase_status OF

	CSP_CASE_PHASE_STATUS_START:	(* Start phasing *)
		IF	(
				motorization_manager_is_starting(csp_main_motorization_manager.motm) //TODOPZ: da decidere a che livello usare le variabili di i e o: wn_feeding.i_motorization_is_starting?					
				//OR
				//jog_manager_is_jog_axis_active(JOG_LIST_CSP_CASE_VIRTUAL, csp_main_jogManager.jog_manager_virtual)
			)
			AND csp_case_fc_ls_upper_leadingMinorCloser_virtual.phase_done
			AND csp_case_fc_ls_upper_leadingMinorCloser_virtual.connection_done
		THEN
			phase_running := TRUE;			
			phase_status_next := CSP_CASE_PHASE_STATUS_DISABLE;
		END_IF
						
	CSP_CASE_PHASE_STATUS_DISABLE:
		axis_disable(axis);		
		
		IF 	axis_is_disabled(axis)
		THEN
			phase_status_next := CSP_CASE_PHASE_STATUS_ENABLE;
		END_IF
		
	CSP_CASE_PHASE_STATUS_ENABLE:
		axis_enable(axis);
		
		IF 	axis_is_enabled(axis)
		THEN
			phase_status_next := CSP_CASE_PHASE_STATUS_ENABLED;
		END_IF
		
	CSP_CASE_PHASE_STATUS_ENABLED:
	
		IF 	axis_is_standstill(axis) 
		THEN
			phase_status_next := CSP_CASE_PHASE_STATUS_CALCULATE_SLAVE_POSITION_REQUEST;								
		END_IF
		
	CSP_CASE_PHASE_STATUS_CALCULATE_SLAVE_POSITION_REQUEST:
	
		slave_position_has_been_calculated := FALSE;
		
		IF run_upstream  
		THEN
			active_cam	 :=  CASE_FC_LEADING_MINOR_RUN_UPSTREAM_RUN_CAM; (*9*)
		END_IF
		
		IF run_downstream 
		THEN
			active_cam	 :=  cam_id; //CASE_FC_LEADING_MINOR_RUN_DOWNSTREAM_RUN_CAM (*10 or 16*)
		END_IF
		
		
		(* Gets the position of the master axis *)
		axis_calculate_cam_slave_master_position_deg := 
			LMOD(axis_get_actual_modulo_position(csp_case_fc_ls_upper_leadingMinorCloser_virtual.axis)
			+ home_position_master_offset_deg, G_MODULO_360_DEG);
			
		IF 	(csp_main_motorization_virtualManager.axis.actual_position >= 180 AND csp_main_motorization_virtualManager.axis.actual_position <= 350)
			AND active_cam = cam_id //CASE_FC_LEADING_MINOR_RUN_DOWNSTREAM_RUN_CAM;
		THEN
			active_cam := CASE_FC_LEADING_MINOR_RUN_UPSTREAM_RUN_CAM;
		END_IF
			
		(* Gets cam data for slave axis to master *)
		IF axis_calculate_cam_slave_dynamics_data(
			cam_id := active_cam,
			master_scaling := master_scaling,
			master_position := axis_calculate_cam_slave_master_position_deg,
			slave_scaling := slave_scaling,
			CONVERSION_this := axis)
		THEN
			phase_status_next := CSP_CASE_PHASE_STATUS_CALCULATING_SLAVE_POSITION;
		END_IF
	
	CSP_CASE_PHASE_STATUS_CALCULATING_SLAVE_POSITION:
	
		IF 	axis_cam_slave_dynamics_data_calculated(axis)
		THEN
			
			axis_calculated_cam_slave_position_deg := axis_get_cam_slave_dynamics_position(axis);
			slave_position_has_been_calculated := TRUE;
			
			IF 	active_cam = DWELL_CAM
			THEN
				IF 	at_upstream_pos
				THEN
					axis_calculated_cam_slave_position_deg := axis_calculated_cam_slave_position_deg + slave_scaling;
				ELSIF at_downstream_pos
				THEN
					axis_calculated_cam_slave_position_deg := 0;
				ELSE
					;
				END_IF
			END_IF
			
			IF 	csp_case_loader.phasing_order_done 
				OR csp_case_loader.bypass_new_phase//wait for loader to be done checking positioning
			THEN
				phase_status_next := CSP_CASE_PHASE_STATUS_REQUEST;
			END_IF
				
		END_IF
		
	CSP_CASE_PHASE_STATUS_REQUEST:
	
		IF axis.actual_position > axis_calculated_cam_slave_position_deg 
		THEN 
			phase_NEG := TRUE; 
		ELSE 
			phase_NEG := FALSE; 
		END_IF
		
		IF	axis_is_standstill(axis)
		THEN
			axis_move_absolute(
				position 		:= axis_calculated_cam_slave_position_deg,
				velocity 		:= phase_velocity_degps,
				direction		:= SEL(phase_NEG, AXIS_POSITIVE_DIRECTION, AXIS_NEGATIVE_DIRECTION),
				acceleration 	:= MOTOR_MAX_ACCELLERATION_DEGPS2,
				deceleration 	:= MOTOR_MAX_DECELLERATION_DEGPS2, 
				jerk 			:= MOTOR_MAX_JERK_DEGPS3, 
				buffer_mode 	:= AXIS_BUFFER_MODE_BUFFERED,
				CONVERSION_this := axis
				); 
			
		END_IF

		IF 	axis_is_absolute_moving(axis)
		THEN
			phase_status_next	:=	CSP_CASE_PHASE_STATUS_PHASING;
		END_IF

	CSP_CASE_PHASE_STATUS_PHASING:

		IF 	axis_is_standstill(axis)
		THEN
			phase_status_next	:=	CSP_TRANSFER_STATUS_PHASED;
		END_IF

	CSP_TRANSFER_STATUS_PHASED:

		IF 	engage_enable
		THEN
			phase_status_next := CSP_CASE_PHASE_STATUS_DONE;
		END_IF
		
		
	CSP_CASE_PHASE_STATUS_DONE:	(* Phase done *)			
		phase_running := FALSE;
		phase_done := TRUE;				
	
	CSP_CASE_PHASE_STATUS_ERROR:	(* Phase error *)
		

		IF	phase_running
		THEN
			phase_error := TRUE;
			axis_disable(axis);									
		END_IF
		phase_running := FALSE;
		
		IF	phase_conditions 	
		THEN
			phase_status_next := CSP_CASE_PHASE_STATUS_START;
		END_IF
		
END_CASE

IF 	NOT debug_state_machine
	OR
	debug_phase_machine_one_step	
THEN
	phase_status := phase_status_next;
	debug_phase_machine_one_step := FALSE;
END_IF

(* Phasing timeout *)
IF (phase_running
	AND NOT debug_state_machine)
	AND csp_case_loader.phasing_order_done
	OR phase_error
THEN
	IF	timer_is_expired(phase_time_out_tmr)
	THEN
		process_message_set(1, phase_status, 0, phase_faulted_aem);
	END_IF
ELSE
	timer_restart(20000, phase_time_out_tmr);
END_IF

]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>