<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="csp_transfer_main_safety_guards" Id="{b876861a-89bd-439e-ac4f-f5c92896aa19}" SpecialFunc="None">
    <Declaration><![CDATA[(*********************************** G.D S.p.A. - Technical Department ***********************************
============= PROGRAM INFO ============
FOLDER:             TBD
MACHINES INVOLVED:  TBD 

============= DESCRIPTION =============
csp safety guards manager 

============= REVISIONS ===============
Date		Version	 	Author      	Description             
----------	-------		------------  	--------------------------------------------
2019/06/24 	0000.00	 	M.Grasso		Creation of the PRG

**********************************************************************************************************)
(*$R
	process_ref := prc;
$*)
PROGRAM csp_transfer_main_safety_guards
VAR
	prc:											process;
	prc_path:										STRING;
	
	(*UNLOCK: guardare email GIAMPAOLO per unlock request (IO Link) come ulteriore IF per unlockare i carter.*)
	
	sig:											safety_integrated_group;
	sis:											safety_integrated_series;
	delayed_sis:									safety_integrated_series;
	
	sig_running :									BOOL;
	
	sio_door_3:										safety_integrated_object;
	sio_door_4:										safety_integrated_object;
	sio_door_5:										safety_integrated_object;
	sio_door_6:										safety_integrated_object;
	sio_door_7:										safety_integrated_object;
	sio_door_8:										safety_integrated_object;
	
	sio_door_3_closed_and_locked:					BOOL;
	sio_door_3_closed:								BOOL;
	sio_door_3_diagnosis:							BOOL;
	sio_door_3_protection_discrepancy:				BOOL;
	sio_door_3_lock_discrepancy:					BOOL;
	sio_door_3_faulted:								BOOL;
	
	sio_door_4_closed_and_locked:					BOOL;
	sio_door_4_closed:								BOOL;
	sio_door_4_diagnosis:							BOOL;
	sio_door_4_protection_discrepancy:				BOOL;
	sio_door_4_lock_discrepancy:					BOOL;
	sio_door_4_faulted:								BOOL;
	
	sio_door_5_closed_and_locked:					BOOL;
	sio_door_5_closed:								BOOL;
	sio_door_5_diagnosis:							BOOL;
	sio_door_5_protection_discrepancy:				BOOL;
	sio_door_5_lock_discrepancy:					BOOL;
	sio_door_5_faulted:								BOOL;
	
	sio_door_6_closed_and_locked:					BOOL;
	sio_door_6_closed:								BOOL;
	sio_door_6_diagnosis:							BOOL;
	sio_door_6_protection_discrepancy:				BOOL;
	sio_door_6_lock_discrepancy:					BOOL;
	sio_door_6_faulted:								BOOL;
	
	sio_door_7_closed_and_locked:					BOOL;
	sio_door_7_closed:								BOOL;
	sio_door_7_diagnosis:							BOOL;
	sio_door_7_protection_discrepancy:				BOOL;
	sio_door_7_lock_discrepancy:					BOOL;
	sio_door_7_faulted:								BOOL;
	
	sio_door_8_closed_and_locked:					BOOL;
	sio_door_8_closed:								BOOL;
	sio_door_8_diagnosis:							BOOL;
	sio_door_8_protection_discrepancy:				BOOL;
	sio_door_8_lock_discrepancy:					BOOL;
	sio_door_8_faulted:								BOOL;
	
	token_circuit_open_boolean:						boolean;
	token_circuit_open_dchk:						digital_check;
	token_circuit_service_stop_dchk:				digital_check;

END_VAR

VAR CONSTANT
	lock_timeout_ncn:								UDINT := 2000;	(*ms*)
	open_timeout_ncn:								UDINT := 10000;	(*ms*)
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[_read_var_input();

_object_manager();

IF NOT objects_running()
THEN
	RETURN;	
END_IF

_read_process_image();

_mode_manager();

CASE process_get_mode(prc) of
	MODE_ABSENT,
	MODE_INACTIVE:
		RETURN;
	MODE_TEST:
		_handle_process_test();
END_CASE

_set_runtime_properties();

(********************************* BODY *********************************)

safety_integrated_series_close(sis);
safety_integrated_series_close(delayed_sis);

IF  NOT sig_running
THEN
    safety_integrated_group_run(sig);
END_IF;


(* TOKEN LOGIC TO STOP MACHINE *)
IF NOT safety_integrated_series_is_safely_closed(csp_transfer_main_safety_token.sis)
THEN
	boolean_set(token_circuit_open_boolean);
ELSE
	boolean_reset(token_circuit_open_boolean);
END_IF

IF 	machine_is_stopped(csp.mch)
	AND NOT safety_integrated_series_is_safely_closed(csp_transfer_main_safety_token.sis)
THEN
	 safety_integrated_series_open(csp_transfer_main_safety_drives_PS41020.sis);
END_IF

(* TOKEN LOGIC TO OPEN DOORS *)
IF NOT safety_integrated_series_is_safely_closed(csp_transfer_main_safety_drives_PS41020.sis)
THEN

	IF (
			machine_is_stopped(csp.mch) //Marco: machine aborted 01/04/2020 -> GIAMPAOLO: motorization_manager (non machine)
			OR 
			machine_is_stop_emergency_active(csp.mch)
			OR 
			csp.o_machine_is_stopped
		)
		AND NOT csp_transfer_main_safety_token.o_token_series_closed
		AND (
			csp_main_services_pushbuttons.unlock_guard_enable_from_reclassification
			OR
			NOT csp_main_accuchange.machine_size_complete
			)
	THEN
		
		IF sio_door_3_closed_and_locked
		THEN
			safety_integrated_object_unlock(sio_door_3);
		END_IF
		
		IF sio_door_4_closed_and_locked
		THEN
			safety_integrated_object_unlock(sio_door_4);
		END_IF
		
		IF sio_door_5_closed_and_locked
		THEN
			safety_integrated_object_unlock(sio_door_5);
		END_IF
		
		IF sio_door_6_closed_and_locked
		THEN
			safety_integrated_object_unlock(sio_door_6);
		END_IF
		
		IF sio_door_7_closed_and_locked
		THEN
			safety_integrated_object_unlock(sio_door_7);
		END_IF
		
		IF sio_door_8_closed_and_locked
		THEN
			safety_integrated_object_unlock(sio_door_8);
		END_IF
		

	ELSIF	csp_main_services_pushbuttons.i_reset_button ////machine_is_ready_edge(csp.mch) // 0714 NOT machine_is_stopped(csp.mch) 07152020
			AND
			safety_integrated_series_is_safely_closed(csp_transfer_main_safety_token.sis)
	THEN
			
		IF	sio_door_3_closed
			AND NOT sio_door_3_closed_and_locked
		THEN
			safety_integrated_object_lock(sio_door_3);
		END_IF
		
		IF	sio_door_4_closed
			AND NOT sio_door_4_closed_and_locked
		THEN
			safety_integrated_object_lock(sio_door_4);
		END_IF
		
		IF	sio_door_5_closed
			AND NOT sio_door_5_closed_and_locked
		THEN
			safety_integrated_object_lock(sio_door_5);
		END_IF
		
		IF	sio_door_6_closed
			AND NOT sio_door_6_closed_and_locked
		THEN
			safety_integrated_object_lock(sio_door_6);
		END_IF
		
		IF	sio_door_7_closed
			AND NOT sio_door_7_closed_and_locked
		THEN
			safety_integrated_object_lock(sio_door_7);
		END_IF
		
		IF	sio_door_8_closed
			AND NOT sio_door_8_closed_and_locked
		THEN
			safety_integrated_object_lock(sio_door_8);
		END_IF
				
	END_IF
END_IF

IF	(
		(
			motorization_manager_is_held(csp_main_motorization_manager.motm) 
			OR motorization_manager_is_suspended(csp_main_motorization_manager.motm)
		)
		AND csp_main_motorization_manager.debug_Enable_new_conditioners (* Selector on HMI while still being tested *)
	)
	OR
	(
		NOT csp_main_motorization_manager.debug_Enable_new_conditioners (* Selector on HMI while still being tested *)
		AND csp_main_motorization_manager.suspend_conditions
	)
THEN
	digital_check_disable(token_circuit_open_dchk);
	digital_check_enable(token_circuit_service_stop_dchk);	
ELSE
	digital_check_enable(token_circuit_open_dchk);
	digital_check_disable(token_circuit_service_stop_dchk);
END_IF
(************************************************************************)

_handle_messages();

_write_output();]]></ST>
    </Implementation>
    <Action Name="_handle_messages" Id="{1f2036a7-52c8-400e-a85f-6dc07766655b}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_handle_process_test" Id="{bfedec45-2933-4163-af86-108bc87d4df0}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_mode_manager" Id="{e96b04a7-1a6f-41c8-89b0-391ccff1a9ab}">
      <Implementation>
        <ST><![CDATA[IF process_mode_req_is_pending(prc)
THEN
    process_apply_mode_req_first_step(prc);
    CASE process_get_mode(prc) OF
        MODE_TO_ABSENT:
			;
        MODE_TO_INACTIVE:
			;
        MODE_TO_TEST:
			;
        MODE_TO_OPERATIONAL:
			;
    END_CASE
    process_apply_mode_req_second_step(prc);
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_object_manager" Id="{f81541f2-cdc6-4bf0-9c04-fb4f2854b3ea}">
      <Implementation>
        <ST><![CDATA[IF objects_initialization()
THEN
	sub_process_init(
		object_name							:= 'csp_transfer_main_safety_guards.prc', 
		process								:= csp_transfer_main_safety.prc, 
		CONVERSION_this						:= prc);
		
	prc_path 								:= process_get_path(prc);
	
		(* SAFETY GROUP *)
	safety_integrated_group_init(
		object_name								:= CONCAT(prc_path, '_sig'), 
		controller								:= csp_transfer_main_safety_interface.SPLC40210_sic, 
		process									:= prc, 
		CONVERSION_this							:= sig);

			
	(* GUARD DOOR 3 *)
	safety_integrated_object_init(
		object_name								:= CONCAT(prc_path, '_sio_door_3'), 
		_type									:= SAFETY_INTEGRATED_OBJECT_WITH_LOCK_AND_UNLOCK_ON_RISING_EDGE_TYPE, 
		discrepancy_active						:= TRUE, 
		process									:= prc, 
		CONVERSION_this							:= sio_door_3);
		
	safety_integrated_object_add_safety_integrated_group(
		group									:= sig, 
		CONVERSION_this							:= sio_door_3);
		
	safety_integrated_object_lock_init(
		discrepancy_active						:= TRUE, 
		safely_locked_input_polarity_direct		:= TRUE, 
		CONVERSION_this							:= sio_door_3);
		
	safety_integrated_object_set_lock_timeout(
		value									:= lock_timeout_ncn,
		CONVERSION_this							:= sio_door_3);
		
	safety_integrated_object_set_lock_timeout( 
		value := lock_timeout_ncn, 
		CONVERSION_this := sio_door_3);
		
		
	(* GUARD DOOR 4 *)
	safety_integrated_object_init(
		object_name								:= CONCAT(prc_path, '_sio_door_4'), 
		_type									:= SAFETY_INTEGRATED_OBJECT_WITH_LOCK_AND_UNLOCK_ON_RISING_EDGE_TYPE, 
		discrepancy_active						:= TRUE, 
		process									:= prc, 
		CONVERSION_this							:= sio_door_4);
		
	safety_integrated_object_add_safety_integrated_group(
		group									:= sig, 
		CONVERSION_this							:= sio_door_4);
		
	safety_integrated_object_lock_init(
		discrepancy_active						:= TRUE, 
		safely_locked_input_polarity_direct		:= TRUE, 
		CONVERSION_this							:= sio_door_4);
		
	safety_integrated_object_set_lock_timeout(
		value									:= lock_timeout_ncn,
		CONVERSION_this							:= sio_door_4);
		
	safety_integrated_object_set_lock_timeout( 
		value := lock_timeout_ncn, 
		CONVERSION_this := sio_door_4);
		
		
	(* GUARD DOOR 5 *)
	safety_integrated_object_init(
		object_name								:= CONCAT(prc_path, '_sio_door_5'), 
		_type									:= SAFETY_INTEGRATED_OBJECT_WITH_LOCK_AND_UNLOCK_ON_RISING_EDGE_TYPE, 
		discrepancy_active						:= TRUE, 
		process									:= prc, 
		CONVERSION_this							:= sio_door_5);
		
	safety_integrated_object_add_safety_integrated_group(
		group									:= sig, 
		CONVERSION_this							:= sio_door_5);
		
	safety_integrated_object_lock_init(
		discrepancy_active						:= TRUE, 
		safely_locked_input_polarity_direct		:= TRUE, 
		CONVERSION_this							:= sio_door_5);
		
	safety_integrated_object_set_lock_timeout(
		value									:= lock_timeout_ncn,
		CONVERSION_this							:= sio_door_5);
		
	safety_integrated_object_set_lock_timeout( 
		value := lock_timeout_ncn, 
		CONVERSION_this := sio_door_5);
		
		
	(* GUARD DOOR 6 *)
	safety_integrated_object_init(
		object_name								:= CONCAT(prc_path, '_sio_door_6'), 
		_type									:= SAFETY_INTEGRATED_OBJECT_WITH_LOCK_AND_UNLOCK_ON_RISING_EDGE_TYPE, 
		discrepancy_active						:= TRUE, 
		process									:= prc, 
		CONVERSION_this							:= sio_door_6);
		
	safety_integrated_object_add_safety_integrated_group(
		group									:= sig, 
		CONVERSION_this							:= sio_door_6);
		
	safety_integrated_object_lock_init(
		discrepancy_active						:= TRUE, 
		safely_locked_input_polarity_direct		:= TRUE, 
		CONVERSION_this							:= sio_door_6);
		
	safety_integrated_object_set_lock_timeout(
		value									:= lock_timeout_ncn,
		CONVERSION_this							:= sio_door_6);
		
	safety_integrated_object_set_lock_timeout( 
		value := lock_timeout_ncn, 
		CONVERSION_this := sio_door_6);
		
		
	(* GUARD DOOR 7 *)
	safety_integrated_object_init(
		object_name								:= CONCAT(prc_path, '_sio_door_7'), 
		_type									:= SAFETY_INTEGRATED_OBJECT_WITH_LOCK_AND_UNLOCK_ON_RISING_EDGE_TYPE, 
		discrepancy_active						:= TRUE, 
		process									:= prc, 
		CONVERSION_this							:= sio_door_7);
		
	safety_integrated_object_add_safety_integrated_group(
		group									:= sig, 
		CONVERSION_this							:= sio_door_7);
		
	safety_integrated_object_lock_init(
		discrepancy_active						:= TRUE, 
		safely_locked_input_polarity_direct		:= TRUE, 
		CONVERSION_this							:= sio_door_7);
		
	safety_integrated_object_set_lock_timeout(
		value									:= lock_timeout_ncn,
		CONVERSION_this							:= sio_door_7);
		
	safety_integrated_object_set_lock_timeout( 
		value := lock_timeout_ncn, 
		CONVERSION_this := sio_door_7);
		
		
	(* GUARD DOOR 8 *)	
	safety_integrated_object_init(
		object_name								:= CONCAT(prc_path, '_sio_door_8'), 
		_type									:= SAFETY_INTEGRATED_OBJECT_WITH_LOCK_AND_UNLOCK_ON_RISING_EDGE_TYPE, 
		discrepancy_active						:= TRUE, 
		process									:= prc, 
		CONVERSION_this							:= sio_door_8);
		
	safety_integrated_object_add_safety_integrated_group(
		group									:= sig, 
		CONVERSION_this							:= sio_door_8);
		
	safety_integrated_object_lock_init(
		discrepancy_active						:= TRUE, 
		safely_locked_input_polarity_direct		:= TRUE, 
		CONVERSION_this							:= sio_door_8);
		
	safety_integrated_object_set_lock_timeout(
		value									:= lock_timeout_ncn,
		CONVERSION_this							:= sio_door_8);
		
	safety_integrated_object_set_lock_timeout( 
		value := lock_timeout_ncn, 
		CONVERSION_this := sio_door_8);
		
		
	(* SAFETY SERIES *)
	safety_integrated_series_init(
		object_name								:=	CONCAT(prc_path, '_sis'),
		_type									:=	SAFETY_INTEGRATED_SERIES_TYPE_NO_RESET,
		discrepancy_active						:=	FALSE,
		forced_open_active						:=	TRUE,
		process									:=	prc,
		conversion_this							:=	sis);
	safety_integrated_series_add_safety_integrated_group(
		group									:=	sig,
		CONVERSION_this							:=	sis);
	safety_integrated_series_add_safety_integrated_object(
		protection_active						:=	TRUE,
		protection_polarity_direct				:=	TRUE,
		lock_active								:=	TRUE,
		lock_polarity_direct					:=	TRUE,
		contact									:=	sio_door_3,
		CONVERSION_this							:=	sis);
	safety_integrated_series_add_safety_integrated_object(
		protection_active						:=	TRUE,
		protection_polarity_direct				:=	TRUE,
		lock_active								:=	TRUE,
		lock_polarity_direct					:=	TRUE,
		contact									:=	sio_door_4,
		CONVERSION_this							:=	sis);
	safety_integrated_series_add_safety_integrated_object(
		protection_active						:=	TRUE,
		protection_polarity_direct				:=	TRUE,
		lock_active								:=	TRUE,
		lock_polarity_direct					:=	TRUE,
		contact									:=	sio_door_5,
		CONVERSION_this							:=	sis);
	safety_integrated_series_add_safety_integrated_object(
		protection_active						:=	TRUE,
		protection_polarity_direct				:=	TRUE,
		lock_active								:=	TRUE,
		lock_polarity_direct					:=	TRUE,
		contact									:=	sio_door_6,
		CONVERSION_this							:=	sis);
	safety_integrated_series_add_safety_integrated_object(
		protection_active						:=	TRUE,
		protection_polarity_direct				:=	TRUE,
		lock_active								:=	TRUE,
		lock_polarity_direct					:=	TRUE,
		contact									:=	sio_door_7,
		CONVERSION_this							:=	sis);
	safety_integrated_series_add_safety_integrated_object(
		protection_active						:=	TRUE,
		protection_polarity_direct				:=	TRUE,
		lock_active								:=	TRUE,
		lock_polarity_direct					:=	TRUE,
		contact									:=	sio_door_8,
		CONVERSION_this							:=	sis);
		
	(******************DELAYED SERIES********************************)
	safety_integrated_series_init(
		object_name								:=	CONCAT(prc_path, '_delayed_sis'),
		_type									:=	SAFETY_INTEGRATED_SERIES_TYPE_NO_RESET,
		discrepancy_active						:=	FALSE,
		forced_open_active						:=	TRUE,
		process									:=	prc,
		CONVERSION_this							:=	delayed_sis);
	safety_integrated_series_add_safety_integrated_group(
		group									:=	sig,
		CONVERSION_this							:=	delayed_sis);
	safety_integrated_series_add_safety_integrated_series(
		series_active							:= TRUE, 
		series_polarity_direct					:= TRUE, 
		contact									:= sis, 	
		CONVERSION_this							:= delayed_sis);
	safety_integrated_series_set_open_timeout(
		value									:= open_timeout_ncn,
		CONVERSION_this							:= delayed_sis);
	safety_integrated_series_set_contacts_and_series_incoherence_timeout(
		value									:= open_timeout_ncn,
		CONVERSION_this							:= delayed_sis);
		
		
		
	boolean_init(
		object_name 		:= CONCAT(prc_path, '_token_circuit_open_boolean'),
		process				:= prc,
		CONVERSION_this		:= token_circuit_open_boolean);
	
	digital_check_and_message_init(
		object_name 		:= CONCAT(prc_path, '_token_circuit_open_dchk'),
		alarm_if_input_off	:= FALSE,
		alarm_delay			:= 0,
		enabled_at_powerup	:= TRUE,
		individual_reset	:= FALSE,
		machine_reaction 	:= MACHINE_REACTION_STOP_IN_PHASE_ONE,
		typology 			:= MESSAGE_TYPOLOGY_ABNORMAL,
		process				:= prc,
		CONVERSION_this		:= token_circuit_open_dchk);

	digital_check_add_boolean(
		boolean				:= token_circuit_open_boolean,
		CONVERSION_this		:= token_circuit_open_dchk);
	
	digital_check_and_message_init(
		object_name 		:= CONCAT(prc_path, '_token_circuit_service_stop_dchk'),
		alarm_if_input_off	:= FALSE,
		alarm_delay			:= 0,
		enabled_at_powerup	:= TRUE,
		individual_reset	:= FALSE,
		machine_reaction 	:= MACHINE_REACTION_STOP_IN_PHASE_ONE,
		typology 			:= MESSAGE_TYPOLOGY_ABNORMAL,
		process				:= prc,
		CONVERSION_this		:= token_circuit_service_stop_dchk);
		
	digital_check_add_boolean(
		boolean				:= token_circuit_open_boolean,
		CONVERSION_this		:= token_circuit_service_stop_dchk);
		
END_IF

IF objects_running()
THEN
	process_cycle(prc);
	safety_integrated_series_cycle(sis);
	safety_integrated_series_cycle(delayed_sis);
	
	safety_integrated_group_cycle(sig);
	
	safety_integrated_object_cycle(sio_door_3);
	safety_integrated_object_cycle(sio_door_4);
	safety_integrated_object_cycle(sio_door_5);
	safety_integrated_object_cycle(sio_door_6);
	safety_integrated_object_cycle(sio_door_7);
	safety_integrated_object_cycle(sio_door_8);
	
	digital_check_cycle(token_circuit_open_dchk);		
	digital_check_cycle(token_circuit_service_stop_dchk);

END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_read_process_image" Id="{490a90a0-f7cd-464e-b1e2-249e968b2116}">
      <Implementation>
        <ST><![CDATA[sig_running := safety_integrated_group_is_running(sig);

sio_door_3_closed := NOT safety_integrated_object_protection_is_open(sio_door_3);
sio_door_3_closed_and_locked := safety_integrated_object_is_safely_closed(sio_door_3);
sio_door_3_protection_discrepancy := safety_integrated_object_is_protection_discrepancy(sio_door_3);
sio_door_3_lock_discrepancy := safety_integrated_object_is_lock_discrepancy(sio_door_3);
sio_door_3_faulted := safety_integrated_object_is_faulted(sio_door_3);


sio_door_3_diagnosis := sio_door_3_protection_discrepancy
						OR
			 	 		sio_door_3_lock_discrepancy;
						
sio_door_4_closed := NOT safety_integrated_object_protection_is_open(sio_door_4);
sio_door_4_closed_and_locked := safety_integrated_object_is_safely_closed(sio_door_4);
sio_door_4_protection_discrepancy := safety_integrated_object_is_protection_discrepancy(sio_door_4);
sio_door_4_lock_discrepancy := safety_integrated_object_is_lock_discrepancy(sio_door_4);
sio_door_4_faulted := safety_integrated_object_is_faulted(sio_door_4);


sio_door_4_diagnosis := sio_door_4_protection_discrepancy
						OR
			 	 		sio_door_4_lock_discrepancy;

sio_door_5_closed := NOT safety_integrated_object_protection_is_open(sio_door_5);
sio_door_5_closed_and_locked := safety_integrated_object_is_safely_closed(sio_door_5);
sio_door_5_protection_discrepancy := safety_integrated_object_is_protection_discrepancy(sio_door_5);
sio_door_5_lock_discrepancy := safety_integrated_object_is_lock_discrepancy(sio_door_5);
sio_door_5_faulted := safety_integrated_object_is_faulted(sio_door_5);


sio_door_5_diagnosis := sio_door_5_protection_discrepancy
						OR
			 	 		sio_door_5_lock_discrepancy;
						
sio_door_6_closed := NOT safety_integrated_object_protection_is_open(sio_door_6);
sio_door_6_closed_and_locked := safety_integrated_object_is_safely_closed(sio_door_6);
sio_door_6_protection_discrepancy := safety_integrated_object_is_protection_discrepancy(sio_door_6);
sio_door_6_lock_discrepancy := safety_integrated_object_is_lock_discrepancy(sio_door_6);
sio_door_6_faulted := safety_integrated_object_is_faulted(sio_door_6);


sio_door_6_diagnosis := sio_door_6_protection_discrepancy
						OR
			 	 		sio_door_6_lock_discrepancy;
						
sio_door_7_closed := NOT safety_integrated_object_protection_is_open(sio_door_7);
sio_door_7_closed_and_locked := safety_integrated_object_is_safely_closed(sio_door_7);
sio_door_7_protection_discrepancy := safety_integrated_object_is_protection_discrepancy(sio_door_7);
sio_door_7_lock_discrepancy := safety_integrated_object_is_lock_discrepancy(sio_door_7);
sio_door_7_faulted := safety_integrated_object_is_faulted(sio_door_7);


sio_door_7_diagnosis := sio_door_7_protection_discrepancy
						OR
			 	 		sio_door_7_lock_discrepancy;
						
						
sio_door_8_closed := NOT safety_integrated_object_protection_is_open(sio_door_8);
sio_door_8_closed_and_locked := safety_integrated_object_is_safely_closed(sio_door_8);
sio_door_8_protection_discrepancy := safety_integrated_object_is_protection_discrepancy(sio_door_8);
sio_door_8_lock_discrepancy := safety_integrated_object_is_lock_discrepancy(sio_door_8);
sio_door_8_faulted := safety_integrated_object_is_faulted(sio_door_8);


sio_door_8_diagnosis := sio_door_8_protection_discrepancy
						OR
			 	 		sio_door_8_lock_discrepancy;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_read_var_input" Id="{d44342d5-c038-47d2-8993-fadc5fc9b583}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_set_runtime_properties" Id="{ca5cee41-5638-425f-8208-642b9157368b}">
      <Implementation>
        <ST><![CDATA[IF	sio_door_3_closed
THEN
	IF	sio_door_3_closed_and_locked (*Marco: The method returns TRUE if the sio is safely locked and in case it is configured as object with lock it must be also safely locked*)
	THEN
		//IF	(*unlock request*)
		//THEN
		//	safety_integrated_object_unlock(sio_door_3);
		//END_IF
		;
	ELSE
		//IF	(*lock request*)
		//THEN
			//safety_integrated_object_lock(sio_door_3);
		//END_IF
		;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_write_output" Id="{54d283b1-4251-43f1-8abb-7de36b2619b6}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="csp_transfer_main_safety_guards">
      <LineId Id="252" Count="164" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="csp_transfer_main_safety_guards._handle_messages">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="csp_transfer_main_safety_guards._handle_process_test">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="csp_transfer_main_safety_guards._mode_manager">
      <LineId Id="2" Count="13" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="csp_transfer_main_safety_guards._object_manager">
      <LineId Id="2" Count="306" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="csp_transfer_main_safety_guards._read_process_image">
      <LineId Id="2" Count="66" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="csp_transfer_main_safety_guards._read_var_input">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="csp_transfer_main_safety_guards._set_runtime_properties">
      <LineId Id="2" Count="15" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="csp_transfer_main_safety_guards._write_output">
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>