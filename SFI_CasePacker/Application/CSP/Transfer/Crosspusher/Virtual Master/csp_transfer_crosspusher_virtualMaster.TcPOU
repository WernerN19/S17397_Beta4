<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="csp_transfer_crosspusher_virtualMaster" Id="{f4ae4330-1602-4d20-978b-e81586574583}" SpecialFunc="None">
    <Declaration><![CDATA[(*********************************** G.D S.p.A. - Technical Department ***********************************
============= PROGRAM INFO ============
FOLDER:             TBD
MACHINES INVOLVED:  TBD 

============= DESCRIPTION =============
csp machine declaration

============= REVISIONS ===============
Date		Version	 	Author      	Description             
----------	-------		------------  	--------------------------------------------
2019/04/05 	0000.00	 	M.Grasso		Creation of the PRG

**********************************************************************************************************)
(*$R process_ref := prc; $*)
PROGRAM csp_transfer_crosspusher_virtualMaster
VAR
	
	prc:											process;
	prc_path:										STRING;
	
	axis: 											axis;
	phase_position_deg:								LREAL := 0;
	phase_velocity_degps:							LREAL := 100.0;
	
	home_position_master_offset_deg:				LREAL := 0.0;
	axis_calculate_cam_slave_master_position_deg:	LREAL := 0.0;
	axis_calculated_cam_slave_position_deg:			LREAL := 0.0;	
	slave_position_has_been_calculated:				BOOL  := FALSE;
	
	engage_enable:									BOOL := TRUE;
	slave_scaling:									LREAL := 1;
	master_scaling:									LREAL := 1;
	
	master_offset:									LREAL := 0;
	slave_offset:									LREAL := 0;
	
	empty_shift_bool:								BOOL := TRUE;
	empty_shift_boolean:							boolean;
	
	_1st_column_chksect:							check_section;
	_2nd_column_chksect:							check_section;
	_3rd_column_chksect:							check_section;
	
	cam_change_check_ph:							phase;
	CAM_CHANGE_CHECK_DEG:							LREAL := 340; (*$P $*)
	
	cam_change_horiz_check_ph:						phase;
	CAM_CHANGE_HORIZ_CHECK_DEG:						LREAL := 350; (*$P $*)
	
	loader_clear_check_ph:							phase;
	LOADER_CLEAR_CHECK_DEG:							LREAL := 87; (*$P $*)
	
	phgen:											phase_generator;
	
	
	run:											BOOL := FALSE;
	dwell:											BOOL := FALSE;
	
	run_test:										BOOL;
	dwell_test:										BOOL;
	
	active_cam:										DINT := FORWARD_CAM;
	next_cam:										DINT := FORWARD_CAM;
	
	connection_status: 								csp_transfer_crosspusher_connection_status_enum;
	connection_status_next: 						csp_transfer_crosspusher_connection_status_enum;
	connection_done: 								BOOL;
	connection_running: 							BOOL;
	connection_error:								BOOL;
	connection_time_out_tmr:						timer;
	connection_faulted_aem:	 						message;
	connection_conditions:							BOOL;
	connection_done_motcond:						motorization_conditioner;
	connection_motorization_moving:					BOOL;
	
	next_activation_position:						LREAL;	
	activation_position:							LREAL := 0.0;
	
	phase_status: 									csp_transfer_crosspusher_phase_status_enum;
	phase_status_next: 								csp_transfer_crosspusher_phase_status_enum;
	phase_done: 									BOOL;
	phase_running: 									BOOL;
	phase_error:									BOOL;
	phase_time_out_tmr:								timer;
	phase_faulted_aem:	 							message;
	phase_conditions:								BOOL;
	phase_slave_position:							LREAL;
	
	
	disable_req:									BOOL;
	debug_state_machine:							BOOL := FALSE;
	debug_phase_machine_one_step:					BOOL := FALSE;
	debug_connection_machine_one_step:				BOOL := FALSE;
	debug_immediate_stop_aem:						message;
	debug_immediate_stop:							BOOL;
	fill_chksect:									check_section;	
	
END_VAR

VAR CONSTANT
	
	MOTOR_MAX_VELOCITY_DEGPS:						LREAL := 9600;
	MOTOR_MAX_ACCELERATION_DEGPS2:					LREAL := 48000;
	MOTOR_MAX_DECELERATION_DEGPS2:					LREAL := 48000;
	MOTOR_MAX_JERK_DEGPS3:							LREAL := 1000000; 
	MOTOR_MAX_FOLLOWING_ERROR_DEG:					LREAL := 2;

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[_read_var_input();

_object_manager();

IF NOT objects_running()
THEN
	RETURN;	
END_IF

_read_process_image();

_mode_manager();

CASE process_get_mode(prc) of
	MODE_ABSENT,
	MODE_INACTIVE:
		RETURN;
	MODE_TEST:
		_handle_process_test();
END_CASE

(********************************* BODY *********************************)
IF (csp_transfer_crosspusher_horizontal.axis.actual_position > 100 (*mm*)
   	AND
   	csp_transfer_crosspusher_horizontal.axis.actual_position < 150) (*mm*)
   	AND
   	(
	(csp_transfer_crosspusher_vertical.axis.actual_position > 350) (*deg*)
   	OR
   	(csp_transfer_crosspusher_vertical.axis.actual_position < 10)
	) (*deg*)
THEN
	empty_shift_bool := TRUE; 
ELSE
	empty_shift_bool := FALSE;
END_IF

phase_set_data(
	phase				:= CAM_CHANGE_CHECK_DEG,
	delay				:= 0,			
	max_compensation	:= 0,			
	CONVERSION_this		:= cam_change_check_ph);
	
phase_set_data(
	phase				:= CAM_CHANGE_HORIZ_CHECK_DEG,
	delay				:= 0,			
	max_compensation	:= 0,			
	CONVERSION_this		:= cam_change_horiz_check_ph);
	
phase_set_data(
	phase				:= LOADER_CLEAR_CHECK_DEG,
	delay				:= 0,			
	max_compensation	:= 0,			
	CONVERSION_this		:= loader_clear_check_ph);

(* SETS MASTER SCALING BASED ON SIZE *)
//master_scaling := 1 / csp_main_brand.case_pattern.case_pattern_W;
slave_scaling := csp_main_brand.case_pattern.case_pattern_W;
IF empty_shift_bool
THEN
	boolean_set(empty_shift_boolean);
ELSE
	boolean_reset(empty_shift_boolean);
END_IF

(* Connection Done Test - RMH *)
IF connection_done
THEN 
	motorization_conditioner_start_done(connection_done_motcond);
END_IF

(* RESETS AXES IF PHASE DONE AND CONNECTION DONE AND DISABLED *)
IF 	phase_done
	AND connection_done
	AND axis_is_disabled(axis)
THEN
	phase_done := FALSE;
	connection_done := FALSE;
END_IF

(* CLEARS PHASE AND CONNECTION ERRORS ON STOP *)
IF 	machine_is_stopped(csp.mch)
	OR machine_is_stop_emergency_active(csp.mch)
THEN
	phase_error := FALSE;
	connection_error := FALSE;	
END_IF

(* IF A CAM EVER FAULTS, RESETS TO DWELL CAM *)
IF active_cam = 0
THEN 
	active_cam := DWELL_CAM;
END_IF

jog_manager_set_all_slave_axis_engaged(
	index					:= JOG_LIST_TRANSFER_CROSSPUSHER_VIRTUAL, 
	all_slave_axis_engaged	:= 	axis_is_cam_engaged(csp_transfer_crosspusher_horizontal.axis)
							   	AND
							   	axis_is_cam_engaged(csp_transfer_crosspusher_vertical.axis)
							 	AND
							 	axis_is_cam_engaged(csp_transfer_crosspusher_follower.axis)
							 	AND
							 	axis_is_cam_engaged(csp_transfer_accumulator_lift.axis),
	CONVERSION_this			:= csp_main_jogManager.jog_manager_virtual);


(* DISABLES VIRTUAL IS ANY OF THE SLAVES FAULT *)
IF 	NOT axis_is_disabled(axis)
	AND NOT axis_is_ok(FALSE, csp_transfer_crosspusher_horizontal.axis)
	AND NOT axis_is_ok(FALSE, csp_transfer_crosspusher_follower.axis)
	AND NOT axis_is_ok(FALSE, csp_transfer_crosspusher_vertical.axis)
	AND NOT axis_is_ok(FALSE, csp_transfer_accumulator_lift.axis)
THEN
	axis_disable(axis);
END_IF

(* DISABLES COLUMNS OF SHIFT REGISTER DEPENDING UPON SIZE CONFIGURATION *)
IF csp_main_brand.case_pattern.case_pattern_L = 3
THEN
	check_section_enable(_1st_column_chksect);
ELSE
	check_section_disable(_1st_column_chksect);
END_IF

(* PHASE AND CONNECTION RUN *)
phase();
connection();
_set_runtime_properties();


(************************************************************************)

_handle_messages();

_write_output();]]></ST>
    </Implementation>
    <Action Name="_handle_messages" Id="{4b349d5a-2de5-44ae-af48-97f2ebb42740}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_handle_process_test" Id="{64c8cc68-034d-4fe3-8ee4-1c9300f60b25}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_mode_manager" Id="{88613b2c-7451-4e69-af0a-ebbdbf877684}">
      <Implementation>
        <ST><![CDATA[IF process_mode_req_is_pending(prc)
THEN
    process_apply_mode_req_first_step(prc);
    CASE process_get_mode(prc) OF
        MODE_TO_ABSENT:
			;
        MODE_TO_INACTIVE:
			;
        MODE_TO_TEST:
			;
        MODE_TO_OPERATIONAL:
			;
    END_CASE
    process_apply_mode_req_second_step(prc);
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_object_manager" Id="{193ba175-7e46-4330-933b-08cbf20ba1dd}">
      <Implementation>
        <ST><![CDATA[IF objects_initialization()
THEN
	sub_process_init(
		object_name									:= 'csp_transfer_crosspusher_virtualMaster.prc', 
		process										:= csp_transfer_crosspusher.prc, 
		CONVERSION_this								:= prc);
		
	prc_path 										:= process_get_path(prc);
	
	axis_init(
		object_name									:= CONCAT(prc_path, '_axis'), 
		axis_type									:= AXIS_TYPE_VIRTUAL, 
		encoder_scaling_factor						:= G_VIRTUAL_ENCODER_SCALING_FACTOR_DEGPINC,
		modulo										:= G_MODULO_360_DEG, 
		process										:= prc, 
		CONVERSION_this								:= axis);
	
	axis_set_max_dynamic(
		reference_velocity							:=	MOTOR_MAX_VELOCITY_DEGPS,
		velocity									:=	MOTOR_MAX_VELOCITY_DEGPS,
		acceleration								:=	MOTOR_MAX_ACCELERATION_DEGPS2,
		deceleration								:=	MOTOR_MAX_DECELERATION_DEGPS2,
		jerk										:=	MOTOR_MAX_JERK_DEGPS3,
		following_error								:=	MOTOR_MAX_FOLLOWING_ERROR_DEG,
		CONVERSION_this								:=	axis);
	
	phase_generator_init(
		object_name									:= CONCAT(prc_path, '_phgen'), 
		modulo										:= axis_get_modulo(axis), 
		resolution									:= PHASE_GENERATOR_RESOLUTION_UNIT, 
		axis										:= axis, 
		process										:= prc, 
		CONVERSION_this								:= phgen);
		
	phase_init(
        object_name 								:= CONCAT(prc_path, '_cam_change_check_ph'),
        phase 										:= 0,	//Set at runtime!
        delay 										:= 0,
        max_compensation 							:= 0,
        generator 									:= phgen,
        process 									:= prc,
        CONVERSION_this 							:= cam_change_check_ph);
		
	phase_init(
        object_name 								:= CONCAT(prc_path, '_cam_change_horiz_check_ph'),
        phase 										:= 0,	//Set at runtime!
        delay 										:= 0,
        max_compensation 							:= 0,
        generator 									:= phgen,
        process 									:= prc,
        CONVERSION_this 							:= cam_change_horiz_check_ph);
		
	phase_init(
        object_name 								:= CONCAT(prc_path, '_loader_clear_check_ph'),
        phase 										:= 0,	//Set at runtime!
        delay 										:= 0,
        max_compensation 							:= 0,
        generator 									:= phgen,
        process 									:= prc,
        CONVERSION_this 							:= loader_clear_check_ph);
		
		
	process_message_init(
		object_name									:=	CONCAT(prc_path, '_phase_faulted_aem'), 
		behaviour									:=	MESSAGE_BEHAVIOUR_EVENT,
		reset_timeout								:=	0,
		disableable									:=	TRUE,
		individual_reset							:=	FALSE,
		machine_reaction							:=	MACHINE_REACTION_NORMAL_STOP,
		typology									:=	MESSAGE_TYPOLOGY_ABNORMAL,
		process										:=	prc,
		CONVERSION_this								:=	phase_faulted_aem);
	
	timer_init(
		object_name									:= CONCAT(prc_path, 'phase_time_out_tmr'),
		process										:= prc,
		CONVERSION_this								:= phase_time_out_tmr);
		
	process_message_init(
		object_name									:=	CONCAT(prc_path, 'debug_immediate_stop_aem'), 
		behaviour									:=	MESSAGE_BEHAVIOUR_STATE,
		reset_timeout								:=	0,
		disableable									:=	TRUE,
		individual_reset							:=	FALSE,
		machine_reaction							:=	MACHINE_REACTION_NORMAL_STOP,
		typology									:=	MESSAGE_TYPOLOGY_ABNORMAL,
		process										:=	prc,
		CONVERSION_this								:=	debug_immediate_stop_aem);
		
	timer_init(
		object_name									:= CONCAT(prc_path, 'connection_time_out_tmr'),
		process										:= prc,
		CONVERSION_this								:= connection_time_out_tmr);
		
		
	process_message_init(
		object_name									:=	CONCAT(prc_path, '_connection_faulted_aem'), 
		behaviour									:=	MESSAGE_BEHAVIOUR_EVENT,
		reset_timeout								:=	0,
		disableable									:=	TRUE,
		individual_reset							:=	FALSE,
		machine_reaction							:=	MACHINE_REACTION_NORMAL_STOP,
		typology									:=	MESSAGE_TYPOLOGY_ABNORMAL,
		process										:=	prc,
		CONVERSION_this								:=	connection_faulted_aem);
		
	motorization_conditioner_init(
		object_name									:=	CONCAT(prc_path, 'connection_done_motcond'),
		velocity_limit								:=	0.0,
		velocity_limit_active						:=	FALSE,
		idle_handshake_active						:=	FALSE,
		execute_handshake_active					:=	TRUE,
		hold_handshake_active						:=	FALSE,
		suspend_handshake_active					:=	FALSE,
		complete_handshake_active					:=	FALSE,
		abort_handshake_active						:=	FALSE,
		stop_handshake_active						:=	FALSE,
		origin										:=	MOTORIZATION_CONDITIONER_ORIGIN_INTERNAL,
		manager										:=	csp_main_motorization_manager.motm,
		process										:=	prc,
		CONVERSION_this								:=	connection_done_motcond);
		
	jog_manager_add_axis(
		list_index									:= JOG_LIST_TRANSFER_CROSSPUSHER_VIRTUAL,
		axis										:= axis,
		master_axis									:= TRUE,
		jog_type									:= JOG_TYPE_ROTATIVE_PLUS,
		sw_limit_positive							:= 0.0,
		sw_limit_negative							:= 0.0,
		CONVERSION_this								:= csp_main_jogManager.jog_manager_virtual);
		
	boolean_init(
		object_name 								:= CONCAT(prc_path, '_empty_shift_boolean'),
		process 									:= prc,
		CONVERSION_this								:= empty_shift_boolean);
		
		
	check_section_window_mode_init(
		object_name									:= CONCAT(prc_path, '_1st_column_chksect'),
		check_enable								:= TRUE, 
		event_to_check								:= CHECK_SECTION_EVENT_INPUT_ON, 
		execution_mode								:= CHECK_SECTION_EXECUTION_WHEN_EVENT_OCCURRED, 
		diagnostic_enable							:= FALSE, 
		status_bits_to_be_true						:= ITEM_HAS_CARTON,
		status_bits_to_be_false						:= common_global_variables.NONE, 
		_step_status_conditioning_execution			:= FALSE, 
		status_bits_to_set							:= common_global_variables.NONE, 
		status_bits_to_reset						:= ALL, 
		reject_bit_to_set							:= NO_REJ_REASON, 
		_step										:= 13, 
		first_step_to_write_offset					:= 0, 
		number_of_steps_to_write					:= 3, 
		begin_phase									:= 200, (*fingers closed*)
		end_phase									:= 300,  (*fingers closed*)
		max_consecutive_failed_checks				:= 0, 
		max_failed_checks_percentage				:= 0, 
		products_for_failed_checks_percentage		:= 0,
		shift_register								:= csp_transfer_main_statistics.upstacker_1st_column_sr , 
		process										:= prc, 
		CONVERSION_this								:= _1st_column_chksect );	
		
	check_section_add_boolean_input(                 
		boolean_input								:= empty_shift_boolean,
		CONVERSION_this								:= _1st_column_chksect);
		
	check_section_window_mode_init(
		object_name									:= CONCAT(prc_path, '_2nd_column_chksect'),
		check_enable								:= TRUE, 
		event_to_check								:= CHECK_SECTION_EVENT_INPUT_ON, 
		execution_mode								:= CHECK_SECTION_EXECUTION_WHEN_EVENT_OCCURRED, 
		diagnostic_enable							:= FALSE, 
		status_bits_to_be_true						:= ITEM_HAS_CARTON, 
		status_bits_to_be_false						:= common_global_variables.NONE, 
		_step_status_conditioning_execution			:= FALSE, 
		status_bits_to_set							:= common_global_variables.NONE, 
		status_bits_to_reset						:= ALL, 
		reject_bit_to_set							:= NO_REJ_REASON, 
		_step										:= 17, 
		first_step_to_write_offset					:= 0, 
		number_of_steps_to_write					:= 3, 
		begin_phase									:= 200, (*fingers closed*)
		end_phase									:= 330,  (*fingers closed*) 
		max_consecutive_failed_checks				:= 0, 
		max_failed_checks_percentage				:= 0, 
		products_for_failed_checks_percentage		:= 0,
		shift_register								:= csp_transfer_main_statistics.upstacker_2nd_column_sr , 
		process										:= prc, 
		CONVERSION_this								:= _2nd_column_chksect );
		
	check_section_add_boolean_input(                 
		boolean_input								:= empty_shift_boolean,
		CONVERSION_this								:= _2nd_column_chksect);
		
	check_section_window_mode_init(
		object_name									:= CONCAT(prc_path, '_3rd_column_chksect'),
		check_enable								:= TRUE, 
		event_to_check								:= CHECK_SECTION_EVENT_INPUT_ON, 
		execution_mode								:= CHECK_SECTION_EXECUTION_WHEN_EVENT_OCCURRED, 
		diagnostic_enable							:= FALSE, 
		status_bits_to_be_true						:= ITEM_HAS_CARTON,  
		status_bits_to_be_false						:= common_global_variables.NONE, 
		_step_status_conditioning_execution			:= FALSE, 
		status_bits_to_set							:= common_global_variables.NONE, 
		status_bits_to_reset						:= ALL, 
		reject_bit_to_set							:= NO_REJ_REASON, 
		_step										:= 21, 
		first_step_to_write_offset					:= 0, 
		number_of_steps_to_write					:= 3, 
		begin_phase									:= 200, (*fingers closed*)
		end_phase									:= 0,  (*fingers closed*)
		max_consecutive_failed_checks				:= 0, 
		max_failed_checks_percentage				:= 0, 
		products_for_failed_checks_percentage		:= 0,
		shift_register								:= csp_transfer_main_statistics.upstacker_3rd_column_sr , 
		process										:= prc, 
		CONVERSION_this								:= _3rd_column_chksect );
		
	check_section_add_boolean_input(                 
		boolean_input								:= empty_shift_boolean, 
		CONVERSION_this								:= _3rd_column_chksect);
		
	check_section_window_mode_init(
		object_name									:= CONCAT(prc_path, '_fill_chksect'),
		check_enable								:= TRUE, 
		event_to_check								:= CHECK_SECTION_EVENT_INPUT_ON, 
		execution_mode								:= CHECK_SECTION_EXECUTION_WHEN_EVENT_OCCURRED, 
		diagnostic_enable							:= FALSE, 
		status_bits_to_be_true						:= common_global_variables.none, 
		status_bits_to_be_false						:= common_global_variables.NONE, 
		_step_status_conditioning_execution			:= FALSE, 
		status_bits_to_set							:= ITEM_HAS_CARTON,   
		status_bits_to_reset						:= common_global_variables.NONE, 
		reject_bit_to_set							:= NO_REJ_REASON, 
		_step										:= 24, 
		first_step_to_write_offset					:= 0, 
		number_of_steps_to_write					:= 1, 
		begin_phase									:= 70, (*to be linked to loader_pusher master_offset*)
		end_phase									:= 120,   (*to be linked to loader_pusher master_offset*)
		max_consecutive_failed_checks				:= 0, 
		max_failed_checks_percentage				:= 0, 
		products_for_failed_checks_percentage		:= 0,
		shift_register								:= csp_transfer_main_statistics.crosspusher_sr , 
		process										:= prc, 
		CONVERSION_this								:= fill_chksect );
		
	check_section_add_boolean_input(                 
		boolean_input								:= empty_shift_boolean, 
		CONVERSION_this								:= fill_chksect);
END_IF

IF objects_running()
THEN
	process_cycle(prc);
	
	motorization_conditioner_cycle(connection_done_motcond);
	
	axis_cycle(axis);
	
	phase_generator_cycle(phgen);
	
	phase_cycle(cam_change_check_ph);
	phase_cycle(cam_change_horiz_check_ph);
	phase_cycle(loader_clear_check_ph);
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_read_process_image" Id="{8f1cae23-c96f-40e1-8711-3ac44675d4a3}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_read_var_input" Id="{70340c94-aee0-47db-a12d-82eb42212e08}">
      <Implementation>
        <ST><![CDATA[disable_req := csp_transfer.virtual_disable_req;]]></ST>
      </Implementation>
    </Action>
    <Action Name="_set_runtime_properties" Id="{c33ea4b0-cd9a-4afa-b542-e9ea84278f3b}">
      <Implementation>
        <ST><![CDATA[(* Cam management *)
IF 	connection_done
THEN
	active_cam := axis.engaged_cam.cam_id;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_write_output" Id="{f6f10012-7e65-4bd7-bb93-ff830bf8a9b5}">
      <Implementation>
        <ST><![CDATA[;]]></ST>
      </Implementation>
    </Action>
    <Action Name="connection" Id="{4ca4f5fa-4642-438e-9845-20713cc3f821}">
      <Implementation>
        <ST><![CDATA[connection_conditions :=	
	NOT process_message_is_on(connection_faulted_aem)
	AND
	phase_done;

(* connection_done reset *)
IF	connection_done
	AND	
	NOT connection_conditions
	AND
	NOT csp.o_machine_is_running
THEN
	connection_done := FALSE;
END_IF

(* Exit conditions *)
IF	NOT connection_conditions 
	AND
	NOT motorization_manager_is_stopping(csp_main_motorization_manager.motm)	
THEN	
	connection_status_next := CSP_TRANSFER_CROSSPUSHER_STATUS_CONNECTION_ERROR;
	connection_status := connection_status_next;	
END_IF

(*************** MACHINE STATUS ***************)
CASE connection_status OF

	CSP_TRANSFER_CROSSPUSHER_STATUS_CONNECTION_START:	(* Start connection *)
	
		IF	motorization_manager_is_starting(csp_main_motorization_manager.motm) 		
		THEN
			connection_running := TRUE;
			connection_status_next := CSP_TRANSFER_CROSSPUSHER_STATUS_CONNECTION_ENGAGE;
		END_IF
		
		
	CSP_TRANSFER_CROSSPUSHER_STATUS_CONNECTION_ENGAGE:		
			
		axis_engage_cam(
			cam_id							:=	FORWARD_CAM, 	
			master_engage_mode				:=	AXIS_CAM_ENGAGE_RELATIVE,
			slave_engage_mode				:=	AXIS_CAM_ENGAGE_RELATIVE,
			activation_mode					:=	AXIS_CAM_ACTIVATION_IMMEDIATELY,
			activation_position				:=	0.0,
			master_scaling_mode				:=	AXIS_CAM_SCALING_MODE_USER_DEFINED,
			slave_scaling_mode				:=	AXIS_CAM_SCALING_MODE_AUTOOFFSET,
			master_offset					:=	master_offset,
			slave_offset					:=	slave_offset,
			master_scaling					:=	master_scaling,
			slave_scaling					:=	slave_scaling,
			interpolation_type				:=	AXIS_CAM_INTERPOLATION_SPLINE,	 
			master							:=	csp_transfer_virtualMaster.axis,
			CONVERSION_this					:=	axis);
		
		connection_status_next:= CSP_TRANSFER_CROSSPUSHER_STATUS_CONNECTION_ENGAGED;
	
		
	CSP_TRANSFER_CROSSPUSHER_STATUS_CONNECTION_ENGAGED:

		IF 	axis_is_cam_engaged(axis) 
		THEN				
			connection_status_next:= CSP_TRANSFER_ACCUMULATOR_STATUS_CONNECTION_DONE;			
		END_IF		

		
	CSP_TRANSFER_CROSSPUSHER_STATUS_CONNECTION_CHECK_CHANGE_CAM:
						
		IF dwell
		THEN		
			CASE active_cam OF				
				DWELL_CAM:
					dwell := FALSE;	
					
				FORWARD_CAM:
					next_cam := DWELL_CAM;						 					
					dwell := FALSE;			
			END_CASE
		END_IF
				
		IF run
		THEN			
			CASE active_cam OF				
				DWELL_CAM:
					next_cam := FORWARD_CAM;
					run := FALSE;

				FORWARD_CAM:
					run := FALSE;														
			END_CASE				
		END_IF	
		
		IF	(active_cam <> next_cam)
			AND 
			connection_conditions
		THEN							
			connection_status_next := CSP_TRANSFER_CROSSPUSHER_STATUS_CONNECTION_CHANGE_CAM;
		END_IF
			
		IF	NOT connection_motorization_moving
		THEN
			connection_status_next := CSP_TRANSFER_CROSSPUSHER_STATUS_CONNECTION_DONE;
		END_IF
	
		
	CSP_TRANSFER_CROSSPUSHER_STATUS_CONNECTION_CHANGE_CAM:	
		
		axis_engage_cam(
				cam_id							:=	next_cam,	
				master_engage_mode				:=	AXIS_CAM_ENGAGE_RELATIVE,
				slave_engage_mode				:=	AXIS_CAM_ENGAGE_RELATIVE,
				activation_mode					:=	AXIS_CAM_ACTIVATION_NEXT_CYCLE,
				activation_position				:=	0,
				master_scaling_mode				:=	AXIS_CAM_SCALING_MODE_USER_DEFINED,
				slave_scaling_mode				:=	AXIS_CAM_SCALING_MODE_USER_DEFINED,
				master_offset					:=	master_offset,
				slave_offset					:=	slave_offset,
				master_scaling					:=	master_scaling,
				slave_scaling					:=	slave_scaling,
				interpolation_type				:=	AXIS_CAM_INTERPOLATION_SPLINE,	 
				master							:=	csp_transfer_virtualMaster.axis,
				CONVERSION_this					:=	axis);	
	
		IF	motorization_manager_is_starting(csp_main_motorization_manager.motm)
		THEN
			connection_status_next := CSP_TRANSFER_CROSSPUSHER_STATUS_CONNECTION_DONE;
		ELSE
			IF axis_is_cam_engaged(axis)
			THEN
				connection_status_next := CSP_TRANSFER_CROSSPUSHER_STATUS_CONNECTION_WAIT_NEW_CAM;
			END_IF
		END_IF
	
		
	CSP_TRANSFER_CROSSPUSHER_STATUS_CONNECTION_WAIT_NEW_CAM:
	
		IF	active_cam = next_cam
		THEN
			CASE next_cam OF
				DWELL_CAM:
					activation_position := next_activation_position;
				
				FORWARD_CAM:
					activation_position := 0;					
			END_CASE
			connection_status_next := CSP_TRANSFER_CROSSPUSHER_STATUS_CONNECTION_CHECK_CHANGE_CAM;
		END_IF
		
		IF	NOT connection_motorization_moving
		THEN
			connection_status_next := CSP_TRANSFER_CROSSPUSHER_STATUS_CONNECTION_DONE;
		END_IF
		
		
	CSP_TRANSFER_CROSSPUSHER_STATUS_CONNECTION_DONE:	(* Connection done *)	
	
		connection_running := FALSE;
		connection_done := TRUE;
		
		IF	motorization_manager_is_starting(csp_main_motorization_manager.motm)
		THEN
			motorization_conditioner_start_done(connection_done_motcond);
		END_IF
		
		
	CSP_TRANSFER_CROSSPUSHER_STATUS_CONNECTION_ERROR:	(* Connection error *)
	
		IF 	connection_running
			OR NOT axis_is_ok(FALSE, axis)
		THEN
			axis_disable(axis);
			connection_error := TRUE;						
		END_IF
		connection_running	:= FALSE;
		connection_done 	:= FALSE;	
		
		IF	connection_conditions
		THEN		
			connection_status_next := CSP_TRANSFER_CROSSPUSHER_STATUS_CONNECTION_START;
		END_IF		
END_CASE

IF 	NOT debug_state_machine
	OR
	debug_connection_machine_one_step	
THEN
	connection_status := connection_status_next;
	debug_connection_machine_one_step := FALSE;
END_IF

connection_motorization_moving	:= 
	motorization_manager_is_starting(csp_main_motorization_manager.motm)
	OR
	motorization_manager_is_execute(csp_main_motorization_manager.motm)
	OR
	motorization_manager_is_stopping(csp_main_motorization_manager.motm)
	OR
	motorization_manager_is_suspended(csp_main_motorization_manager.motm)
	OR
	motorization_manager_is_suspending(csp_main_motorization_manager.motm)
	OR
	motorization_manager_is_unsuspending(csp_main_motorization_manager.motm)
	OR 
	motorization_manager_is_holding(csp_main_motorization_manager.motm)
	OR
	motorization_manager_is_held(csp_main_motorization_manager.motm)
	OR
	motorization_manager_is_unholding(csp_main_motorization_manager.motm);
	
(* Connection timeout *)
IF	(connection_running
AND NOT debug_state_machine)	
	OR connection_error
THEN
	IF	timer_is_expired(connection_time_out_tmr)
	THEN
		process_message_set(1, connection_status, 0, connection_faulted_aem);
	END_IF
ELSE
	timer_restart(10000, connection_time_out_tmr);
END_IF
]]></ST>
      </Implementation>
    </Action>
    <Action Name="phase" Id="{fab1ba33-5f05-4dbd-a7b4-31f5e9dcb739}">
      <Implementation>
        <ST><![CDATA[phase_conditions :=
	axis_is_ok(FALSE, axis)
	AND
	process_is_ready(prc)
	AND
	process_subtree_is_ready(prc)
	AND				
	NOT csp_transfer_main_brand.cam_data_changed
	AND
	NOT jog_manager_is_jog_axis_active(JOG_LIST_TRANSFER_CROSSPUSHER_VIRTUAL, csp_main_jogManager.jog_manager_virtual)
	AND
	NOT disable_req;		
	
(* phase_done reset *)
IF	phase_done
	AND
	NOT phase_conditions
THEN
	phase_done:= FALSE;
END_IF

(* Exit condition *)
IF 	NOT phase_conditions
THEN
	phase_status_next := CSP_TRANSFER_CROSSPUSHER_PHASE_STATUS_ERROR;
	phase_status := phase_status_next;	
END_IF

(*************** MACHINE STATUS ***************)
CASE phase_status OF

	CSP_TRANSFER_CROSSPUSHER_PHASE_STATUS_START:	(* Start phasing *)
	
		IF	motorization_manager_is_starting(csp_main_motorization_manager.motm) 					
			AND csp_transfer_virtualMaster.phase_done
			AND csp_transfer_virtualMaster.connection_done
		THEN
			phase_running := TRUE;			
			phase_status_next := CSP_TRANSFER_CROSSPUSHER_PHASE_STATUS_DISABLE;
		END_IF
	
					
	CSP_TRANSFER_CROSSPUSHER_PHASE_STATUS_DISABLE:
		
		axis_disable(axis);		
		IF 	axis_is_disabled(axis)
		THEN
			phase_status_next := CSP_TRANSFER_CROSSPUSHER_PHASE_STATUS_ENABLE;
		END_IF
	
	
	CSP_TRANSFER_CROSSPUSHER_PHASE_STATUS_ENABLE:
	
		axis_enable(axis);
		
		IF 	axis_is_enabled(axis)
		THEN
			phase_status_next := CSP_TRANSFER_CROSSPUSHER_PHASE_STATUS_ENABLED;
		END_IF
		
		
	CSP_TRANSFER_CROSSPUSHER_PHASE_STATUS_ENABLED:
	
		IF 	axis_is_standstill(axis) 
		THEN
			phase_status_next := CSP_TRANSFER_CROSSPUSHER_PHASE_STATUS_CALCULATE_SLAVE_POSITION_REQUEST;								
		END_IF
		
		
	CSP_TRANSFER_CROSSPUSHER_PHASE_STATUS_CALCULATE_SLAVE_POSITION_REQUEST:
	
		slave_position_has_been_calculated := FALSE;
	
		(* Gets the position of the master axis *)
		axis_calculate_cam_slave_master_position_deg := 
			LMOD(axis_get_actual_modulo_position(csp_transfer_virtualMaster.axis)
			+ master_offset, G_MODULO_360_DEG);
			
		(* Gets cam data for slave axis to master *)
		IF axis_calculate_cam_slave_dynamics_data(
			cam_id := FORWARD_CAM,
			master_scaling := master_scaling,
			master_position := axis_calculate_cam_slave_master_position_deg,
			slave_scaling := slave_scaling,
			CONVERSION_this := axis)
		THEN
			phase_status_next := CSP_TRANSFER_CROSSPUSHER_PHASE_STATUS_CALCULATING_SLAVE_POSITION;
		END_IF
	
		
	CSP_TRANSFER_CROSSPUSHER_PHASE_STATUS_CALCULATING_SLAVE_POSITION:
	
		IF axis_cam_slave_dynamics_data_calculated(axis)
		THEN
			axis_calculated_cam_slave_position_deg := axis_get_cam_slave_dynamics_position(axis);
			slave_position_has_been_calculated := TRUE;
			phase_status_next := CSP_TRANSFER_PHASE_STATUS_REQUEST;
		END_IF
		
		
	CSP_TRANSFER_PHASE_STATUS_REQUEST:
		
		IF	axis_is_standstill(axis)		
		THEN
			axis_move_absolute(
				position 		:= axis_calculated_cam_slave_position_deg,
				velocity 		:= phase_velocity_degps,
				direction		:= AXIS_SHORTEST_WAY,
				acceleration 	:= MOTOR_MAX_ACCELERATION_DEGPS2,
				deceleration 	:= MOTOR_MAX_DECELERATION_DEGPS2, 
				jerk 			:= MOTOR_MAX_JERK_DEGPS3, 
				buffer_mode 	:= AXIS_BUFFER_MODE_BUFFERED,
				CONVERSION_this := axis
				); 			
		END_IF

		IF axis_is_absolute_moving(axis)
		THEN
			phase_status_next	:=	CSP_TRANSFER_PHASE_STATUS_PHASING;
		END_IF

		
	CSP_TRANSFER_PHASE_STATUS_PHASING:

		IF axis_is_standstill(axis)
		THEN
			phase_status_next	:=	CSP_TRANSFER_CROSSPUSHER_STATUS_PHASED;
		END_IF

		
	CSP_TRANSFER_CROSSPUSHER_STATUS_PHASED:

		IF engage_enable
		THEN
			phase_status_next := CSP_TRANSFER_CROSSPUSHER_PHASE_STATUS_DONE;
		END_IF
		
		
	CSP_TRANSFER_CROSSPUSHER_PHASE_STATUS_DONE:	(* Phase done *)	
		
		phase_running := FALSE;
		phase_done := TRUE;				
	
		
	CSP_TRANSFER_CROSSPUSHER_PHASE_STATUS_ERROR:	(* Phase error *)
	
		IF	phase_running
			OR NOT axis_is_ok(FALSE, axis)
		THEN
			phase_error := TRUE;
			axis_disable(axis);									
		END_IF
		phase_running := FALSE;
		
		IF	phase_conditions 	
		THEN
			phase_status_next := CSP_TRANSFER_CROSSPUSHER_PHASE_STATUS_START;
		END_IF		
END_CASE

IF 	NOT debug_state_machine
	OR
	debug_phase_machine_one_step	
THEN
	phase_status := phase_status_next;
	debug_phase_machine_one_step := FALSE;
END_IF

(* Phasing timeout *)
IF (phase_running
	AND NOT debug_state_machine)
	OR phase_error
THEN
	IF	timer_is_expired(phase_time_out_tmr)
	THEN
		process_message_set(1, phase_status, 0, phase_faulted_aem);
	END_IF
ELSE
	timer_restart(30000, phase_time_out_tmr);
END_IF

]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>